"use strict";(self.webpackChunk_masatomakino_threejs_billboard=self.webpackChunk_masatomakino_threejs_billboard||[]).push([[789],{9054:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ textureBitGl),\n/* harmony export */   r: () => (/* binding */ textureBit)\n/* harmony export */ });\n\nconst textureBit = {\n  name: "texture-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: "texture-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=textureBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTA1NC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWJpbGxib2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvdGV4dHVyZUJpdC5tanM/ZWU5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRleHR1cmVCaXQgPSB7XG4gIG5hbWU6IFwidGV4dHVyZS1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG5cbiAgICAgICAgc3RydWN0IFRleHR1cmVVbmlmb3JtcyB7XG4gICAgICAgICAgICB1VGV4dHVyZU1hdHJpeDptYXQzeDM8ZjMyPixcbiAgICAgICAgfVxuXG4gICAgICAgIEBncm91cCgyKSBAYmluZGluZygyKSB2YXI8dW5pZm9ybT4gdGV4dHVyZVVuaWZvcm1zIDogVGV4dHVyZVVuaWZvcm1zO1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICB1diA9ICh0ZXh0dXJlVW5pZm9ybXMudVRleHR1cmVNYXRyaXggKiB2ZWMzKHV2LCAxLjApKS54eTtcbiAgICAgICAgYFxuICAgIClcbiAgfSxcbiAgZnJhZ21lbnQ6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygwKSB2YXIgdVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygxKSB2YXIgdVNhbXBsZXI6IHNhbXBsZXI7XG5cbiAgICAgICAgIFxuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBvdXRDb2xvciA9IHRleHR1cmVTYW1wbGUodVRleHR1cmUsIHVTYW1wbGVyLCB2VVYpO1xuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuY29uc3QgdGV4dHVyZUJpdEdsID0ge1xuICBuYW1lOiBcInRleHR1cmUtYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdW5pZm9ybSBtYXQzIHVUZXh0dXJlTWF0cml4O1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICB1diA9ICh1VGV4dHVyZU1hdHJpeCAqIHZlYzModXYsIDEuMCkpLnh5O1xuICAgICAgICBgXG4gICAgKVxuICB9LFxuICBmcmFnbWVudDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcblxuICAgICAgICAgXG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIG91dENvbG9yID0gdGV4dHVyZSh1VGV4dHVyZSwgdlVWKTtcbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcblxuZXhwb3J0IHsgdGV4dHVyZUJpdCwgdGV4dHVyZUJpdEdsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0dXJlQml0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9054\n')},6546:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ ensureAttributes)\n/* harmony export */ });\n/* harmony import */ var _utils_logging_warn_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4796);\n/* harmony import */ var _shared_geometry_utils_getAttributeInfoFromFormat_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9824);\n\n\n\n"use strict";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.location ?? (attribute.location = attributeData.location);\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      (0,_utils_logging_warn_mjs__WEBPACK_IMPORTED_MODULE_0__/* .warn */ .Z)(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += (0,_shared_geometry_utils_getAttributeInfoFromFormat_mjs__WEBPACK_IMPORTED_MODULE_1__/* .getAttributeInfoFromFormat */ .v)(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += (0,_shared_geometry_utils_getAttributeInfoFromFormat_mjs__WEBPACK_IMPORTED_MODULE_1__/* .getAttributeInfoFromFormat */ .v)(attribute.format).stride;\n  }\n}\n\n\n//# sourceMappingURL=ensureAttributes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU0Ni5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2RDtBQUM4Qzs7QUFFM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTSxzRUFBSSxjQUFjLEdBQUc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0JBQXNCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywwSEFBMEI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywwSEFBMEI7QUFDakU7QUFDQTs7QUFFNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL3Byb2dyYW0vZW5zdXJlQXR0cmlidXRlcy5tanM/ZDUyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9nZW9tZXRyeS91dGlscy9nZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGVuc3VyZUF0dHJpYnV0ZXMoZ2VvbWV0cnksIGV4dHJhY3RlZERhdGEpIHtcbiAgZm9yIChjb25zdCBpIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2ldO1xuICAgIGNvbnN0IGF0dHJpYnV0ZURhdGEgPSBleHRyYWN0ZWREYXRhW2ldO1xuICAgIGlmIChhdHRyaWJ1dGVEYXRhKSB7XG4gICAgICBhdHRyaWJ1dGUubG9jYXRpb24gPz8gKGF0dHJpYnV0ZS5sb2NhdGlvbiA9IGF0dHJpYnV0ZURhdGEubG9jYXRpb24pO1xuICAgICAgYXR0cmlidXRlLmZvcm1hdCA/PyAoYXR0cmlidXRlLmZvcm1hdCA9IGF0dHJpYnV0ZURhdGEuZm9ybWF0KTtcbiAgICAgIGF0dHJpYnV0ZS5vZmZzZXQgPz8gKGF0dHJpYnV0ZS5vZmZzZXQgPSBhdHRyaWJ1dGVEYXRhLm9mZnNldCk7XG4gICAgICBhdHRyaWJ1dGUuaW5zdGFuY2UgPz8gKGF0dHJpYnV0ZS5pbnN0YW5jZSA9IGF0dHJpYnV0ZURhdGEuaW5zdGFuY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKGBBdHRyaWJ1dGUgJHtpfSBpcyBub3QgcHJlc2VudCBpbiB0aGUgc2hhZGVyLCBidXQgaXMgcHJlc2VudCBpbiB0aGUgZ2VvbWV0cnkuIFVuYWJsZSB0byBpbmZlciBhdHRyaWJ1dGUgZGV0YWlscy5gKTtcbiAgICB9XG4gIH1cbiAgZW5zdXJlU3RhcnRBbmRTdHJpZGUoZ2VvbWV0cnkpO1xufVxuZnVuY3Rpb24gZW5zdXJlU3RhcnRBbmRTdHJpZGUoZ2VvbWV0cnkpIHtcbiAgY29uc3QgeyBidWZmZXJzLCBhdHRyaWJ1dGVzIH0gPSBnZW9tZXRyeTtcbiAgY29uc3QgdGVtcFN0cmlkZSA9IHt9O1xuICBjb25zdCB0ZW1wU3RhcnQgPSB7fTtcbiAgZm9yIChjb25zdCBqIGluIGJ1ZmZlcnMpIHtcbiAgICBjb25zdCBidWZmZXIgPSBidWZmZXJzW2pdO1xuICAgIHRlbXBTdHJpZGVbYnVmZmVyLnVpZF0gPSAwO1xuICAgIHRlbXBTdGFydFtidWZmZXIudWlkXSA9IDA7XG4gIH1cbiAgZm9yIChjb25zdCBqIGluIGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2pdO1xuICAgIHRlbXBTdHJpZGVbYXR0cmlidXRlLmJ1ZmZlci51aWRdICs9IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0KGF0dHJpYnV0ZS5mb3JtYXQpLnN0cmlkZTtcbiAgfVxuICBmb3IgKGNvbnN0IGogaW4gYXR0cmlidXRlcykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbal07XG4gICAgYXR0cmlidXRlLnN0cmlkZSA/PyAoYXR0cmlidXRlLnN0cmlkZSA9IHRlbXBTdHJpZGVbYXR0cmlidXRlLmJ1ZmZlci51aWRdKTtcbiAgICBhdHRyaWJ1dGUuc3RhcnQgPz8gKGF0dHJpYnV0ZS5zdGFydCA9IHRlbXBTdGFydFthdHRyaWJ1dGUuYnVmZmVyLnVpZF0pO1xuICAgIHRlbXBTdGFydFthdHRyaWJ1dGUuYnVmZmVyLnVpZF0gKz0gZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQoYXR0cmlidXRlLmZvcm1hdCkuc3RyaWRlO1xuICB9XG59XG5cbmV4cG9ydCB7IGVuc3VyZUF0dHJpYnV0ZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuc3VyZUF0dHJpYnV0ZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6546\n')},647:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   L: () => (/* binding */ GpuStencilModesToPixi)\n/* harmony export */ });\n/* harmony import */ var _shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2475);\n\n\n"use strict";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .D.NONE] = void 0;\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .D.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .D.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: "equal",\n    passOp: "increment-clamp"\n  },\n  stencilBack: {\n    compare: "equal",\n    passOp: "increment-clamp"\n  }\n};\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .D.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: "equal",\n    passOp: "decrement-clamp"\n  },\n  stencilBack: {\n    compare: "equal",\n    passOp: "decrement-clamp"\n  }\n};\nGpuStencilModesToPixi[_shared_state_const_mjs__WEBPACK_IMPORTED_MODULE_0__/* .STENCIL_MODES */ .D.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: "equal",\n    passOp: "keep"\n  },\n  stencilBack: {\n    compare: "equal",\n    passOp: "keep"\n  }\n};\n\n\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ3LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBNkQ7O0FBRTdEO0FBQ0E7QUFDQSxzQkFBc0IsMkVBQWE7QUFDbkMsc0JBQXNCLDJFQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwyRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwyRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwyRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1iaWxsYm9hcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc3RhdGUvR3B1U3RlbmNpbE1vZGVzVG9QaXhpLm1qcz9iMmQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNURU5DSUxfTU9ERVMgfSBmcm9tICcuLi8uLi9zaGFyZWQvc3RhdGUvY29uc3QubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBHcHVTdGVuY2lsTW9kZXNUb1BpeGkgPSBbXTtcbkdwdVN0ZW5jaWxNb2Rlc1RvUGl4aVtTVEVOQ0lMX01PREVTLk5PTkVdID0gdm9pZCAwO1xuR3B1U3RlbmNpbE1vZGVzVG9QaXhpW1NURU5DSUxfTU9ERVMuRElTQUJMRURdID0ge1xuICBzdGVuY2lsV3JpdGVNYXNrOiAwLFxuICBzdGVuY2lsUmVhZE1hc2s6IDBcbn07XG5HcHVTdGVuY2lsTW9kZXNUb1BpeGlbU1RFTkNJTF9NT0RFUy5SRU5ERVJJTkdfTUFTS19BRERdID0ge1xuICBzdGVuY2lsRnJvbnQ6IHtcbiAgICBjb21wYXJlOiBcImVxdWFsXCIsXG4gICAgcGFzc09wOiBcImluY3JlbWVudC1jbGFtcFwiXG4gIH0sXG4gIHN0ZW5jaWxCYWNrOiB7XG4gICAgY29tcGFyZTogXCJlcXVhbFwiLFxuICAgIHBhc3NPcDogXCJpbmNyZW1lbnQtY2xhbXBcIlxuICB9XG59O1xuR3B1U3RlbmNpbE1vZGVzVG9QaXhpW1NURU5DSUxfTU9ERVMuUkVOREVSSU5HX01BU0tfUkVNT1ZFXSA9IHtcbiAgc3RlbmNpbEZyb250OiB7XG4gICAgY29tcGFyZTogXCJlcXVhbFwiLFxuICAgIHBhc3NPcDogXCJkZWNyZW1lbnQtY2xhbXBcIlxuICB9LFxuICBzdGVuY2lsQmFjazoge1xuICAgIGNvbXBhcmU6IFwiZXF1YWxcIixcbiAgICBwYXNzT3A6IFwiZGVjcmVtZW50LWNsYW1wXCJcbiAgfVxufTtcbkdwdVN0ZW5jaWxNb2Rlc1RvUGl4aVtTVEVOQ0lMX01PREVTLk1BU0tfQUNUSVZFXSA9IHtcbiAgc3RlbmNpbFdyaXRlTWFzazogMCxcbiAgc3RlbmNpbEZyb250OiB7XG4gICAgY29tcGFyZTogXCJlcXVhbFwiLFxuICAgIHBhc3NPcDogXCJrZWVwXCJcbiAgfSxcbiAgc3RlbmNpbEJhY2s6IHtcbiAgICBjb21wYXJlOiBcImVxdWFsXCIsXG4gICAgcGFzc09wOiBcImtlZXBcIlxuICB9XG59O1xuXG5leHBvcnQgeyBHcHVTdGVuY2lsTW9kZXNUb1BpeGkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdwdVN0ZW5jaWxNb2Rlc1RvUGl4aS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///647\n')},6496:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   q: () => (/* binding */ BufferResource)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1580);\n/* harmony import */ var _utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6258);\n\n\n\n"use strict";\nclass BufferResource extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * a unique id for this uniform group used through the renderer\n     * @internal\n     * @ignore\n     */\n    this.uid = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__/* .uid */ .h)("buffer");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = "bufferResource";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__/* .uid */ .h)("resource");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on("change", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_1__/* .uid */ .h)("resource");\n    this.emit("change", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit("change", this);\n    this.buffer = null;\n  }\n}\n\n\n//# sourceMappingURL=BufferResource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNZOztBQUVyRDtBQUNBLDZCQUE2Qiw4REFBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isc0JBQXNCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFHO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUVBQUc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpRUFBRztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2J1ZmZlci9CdWZmZXJSZXNvdXJjZS5tanM/NTI1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0IHsgdWlkIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvZGF0YS91aWQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBCdWZmZXJSZXNvdXJjZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgQnVmZmVyIFJlc291cmNlLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgYnVmZmVyIHJlc291cmNlXG4gICAqIEBwYXJhbSBvcHRpb25zLmJ1ZmZlciAtIFRoZSB1bmRlcmx5aW5nIGJ1ZmZlciB0aGF0IHRoaXMgcmVzb3VyY2UgaXMgdXNpbmdcbiAgICogQHBhcmFtIG9wdGlvbnMub2Zmc2V0IC0gVGhlIG9mZnNldCBvZiB0aGUgYnVmZmVyIHRoaXMgcmVzb3VyY2UgaXMgdXNpbmcuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgdGhlbiBpdCB3aWxsIHVzZSB0aGUgb2Zmc2V0IG9mIHRoZSBidWZmZXIuXG4gICAqIEBwYXJhbSBvcHRpb25zLnNpemUgLSBUaGUgc2l6ZSBvZiB0aGUgYnVmZmVyIHRoaXMgcmVzb3VyY2UgaXMgdXNpbmcuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgdGhlbiBpdCB3aWxsIHVzZSB0aGUgc2l6ZSBvZiB0aGUgYnVmZmVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBidWZmZXIsIG9mZnNldCwgc2l6ZSB9KSB7XG4gICAgc3VwZXIoKTtcbiAgICAvKipcbiAgICAgKiBlbWl0cyB3aGVuIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlciBoYXMgY2hhbmdlZCBzaGFwZSAoaS5lLiByZXNpemVkKVxuICAgICAqIGxldHRpbmcgdGhlIHJlbmRlcmVyIGtub3cgdGhhdCBpdCBuZWVkcyB0byBkaXNjYXJkIHRoZSBvbGQgYnVmZmVyIG9uIHRoZSBHUFUgYW5kIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgKiBAZXZlbnQgY2hhbmdlXG4gICAgICovXG4gICAgLyoqXG4gICAgICogYSB1bmlxdWUgaWQgZm9yIHRoaXMgdW5pZm9ybSBncm91cCB1c2VkIHRocm91Z2ggdGhlIHJlbmRlcmVyXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMudWlkID0gdWlkKFwiYnVmZmVyXCIpO1xuICAgIC8qKlxuICAgICAqIGEgcmVzb3VyY2UgdHlwZSwgdXNlZCB0byBpZGVudGlmeSBob3cgdG8gaGFuZGxlIGl0IHdoZW4gaXRzIGluIGEgYmluZCBncm91cCAvIHNoYWRlciByZXNvdXJjZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB0aGlzLl9yZXNvdXJjZVR5cGUgPSBcImJ1ZmZlclJlc291cmNlXCI7XG4gICAgLyoqXG4gICAgICogdXNlZCBpbnRlcm5hbGx5IHRvIGtub3cgaWYgYSB1bmlmb3JtIGdyb3VwIHdhcyB1c2VkIGluIHRoZSBsYXN0IHJlbmRlciBwYXNzXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMuX3RvdWNoZWQgPSAwO1xuICAgIC8qKlxuICAgICAqIHRoZSByZXNvdXJjZSBpZCB1c2VkIGludGVybmFsbHkgYnkgdGhlIHJlbmRlcmVyIHRvIGJ1aWxkIGJpbmQgZ3JvdXAga2V5c1xuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB0aGlzLl9yZXNvdXJjZUlkID0gdWlkKFwicmVzb3VyY2VcIik7XG4gICAgLyoqXG4gICAgICogQSBjaGVla3kgaGludCB0byB0aGUgR0wgcmVuZGVyZXIgdG8gbGV0IGl0IGtub3cgdGhpcyBpcyBhIEJ1ZmZlclJlc291cmNlXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMuX2J1ZmZlclJlc291cmNlID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBIYXMgdGhlIEJ1ZmZlciByZXNvdXJjZSBiZWVuIGRlc3Ryb3llZD9cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0IHwgMDtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMuYnVmZmVyLm9uKFwiY2hhbmdlXCIsIHRoaXMub25CdWZmZXJDaGFuZ2UsIHRoaXMpO1xuICB9XG4gIG9uQnVmZmVyQ2hhbmdlKCkge1xuICAgIHRoaXMuX3Jlc291cmNlSWQgPSB1aWQoXCJyZXNvdXJjZVwiKTtcbiAgICB0aGlzLmVtaXQoXCJjaGFuZ2VcIiwgdGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoaXMgcmVzb3VyY2UuIE1ha2Ugc3VyZSB0aGUgdW5kZXJseWluZyBidWZmZXIgaXMgbm90IHVzZWQgYW55d2hlcmUgZWxzZVxuICAgKiBpZiB5b3Ugd2FudCB0byBkZXN0cm95IGl0IGFzIHdlbGwsIG9yIGNvZGUgd2lsbCBleHBsb2RlXG4gICAqIEBwYXJhbSBkZXN0cm95QnVmZmVyIC0gU2hvdWxkIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlciBiZSBkZXN0cm95ZWQgYXMgd2VsbD9cbiAgICovXG4gIGRlc3Ryb3koZGVzdHJveUJ1ZmZlciA9IGZhbHNlKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIGlmIChkZXN0cm95QnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIHRoaXMuZW1pdChcImNoYW5nZVwiLCB0aGlzKTtcbiAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgQnVmZmVyUmVzb3VyY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJ1ZmZlclJlc291cmNlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6496\n')},1826:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ RenderTarget)\n/* harmony export */ });\n/* harmony import */ var _utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6258);\n/* harmony import */ var _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5206);\n/* harmony import */ var _texture_Texture_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9853);\n\n\n\n\n"use strict";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    this.uid = (0,_utils_data_uid_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uid */ .h)("renderTarget");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === "number") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .TextureSource */ .p({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on("resize", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof _texture_Texture_mjs__WEBPACK_IMPORTED_MODULE_2__/* .Texture */ .x || descriptor.depthStencilTexture instanceof _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .TextureSource */ .p) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new _texture_sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .TextureSource */ .p({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: "depth24plus-stencil8",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off("resize", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\n\n//# sourceMappingURL=RenderTarget.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1826\n')},2028:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  l: () => (/* binding */ RenderTargetSystem)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/matrix/Matrix.mjs\nvar Matrix = __webpack_require__(5321);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs\nvar Rectangle = __webpack_require__(3904);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs\nvar gl_const = __webpack_require__(6582);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs\n\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\n\n//# sourceMappingURL=calculateProjection.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/system/SystemRunner.mjs\nvar SystemRunner = __webpack_require__(7051);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs\nvar CanvasSource = __webpack_require__(6914);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs + 2 modules\nvar TextureSource = __webpack_require__(5206);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs + 2 modules\nvar Texture = __webpack_require__(9853);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs\nvar getCanvasTexture = __webpack_require__(1604);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs\n\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\n\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs\nvar RenderTarget = __webpack_require__(1826);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle/* Rectangle */.A();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle/* Rectangle */.A();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner/* SystemRunner */.P(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix/* Matrix */.y();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture/* Texture */.x) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = gl_const/* CLEAR */.E.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = gl_const/* CLEAR */.E.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource/* CanvasSource */.D.test(renderSurface)) {\n      renderSurface = (0,getCanvasTexture/* getCanvasTexture */.t)(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget/* RenderTarget */.A) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource/* TextureSource */.p) {\n      renderTarget = new RenderTarget/* RenderTarget */.A({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource/* CanvasSource */.D.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\n\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2028\n")},8809:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   L: () => (/* binding */ UboSystem)\n/* harmony export */ });\n/* harmony import */ var _utils_browser_unsafeEvalSupported_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1013);\n/* harmony import */ var _buffer_Buffer_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7494);\n/* harmony import */ var _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5324);\n\n\n\n\n"use strict";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don\'t have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overrideable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn\'t support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!(0,_utils_browser_unsafeEvalSupported_mjs__WEBPACK_IMPORTED_MODULE_0__/* .unsafeEvalSupported */ .O)()) {\n      throw new Error("Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new _buffer_Buffer_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Buffer */ .l({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .F.UNIFORM | _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .F.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new _buffer_Buffer_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Buffer */ .l({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .F.UNIFORM | _buffer_const_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BufferUsage */ .F.COPY_DST\n    }));\n    data || (data = uniformGroup.buffer.data);\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\n\n//# sourceMappingURL=UboSystem.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODgwOS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Y7QUFDMUM7QUFDSTs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsb0dBQW1CO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsK0RBQU07QUFDNUQ7QUFDQSxhQUFhLG1FQUFXLFdBQVcsbUVBQVc7QUFDOUMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsK0RBQU07QUFDNUQ7QUFDQSxhQUFhLG1FQUFXLFdBQVcsbUVBQVc7QUFDOUMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWJpbGxib2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvVWJvU3lzdGVtLm1qcz85ZTNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuc2FmZUV2YWxTdXBwb3J0ZWQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9icm93c2VyL3Vuc2FmZUV2YWxTdXBwb3J0ZWQubWpzJztcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJy4uL2J1ZmZlci9CdWZmZXIubWpzJztcbmltcG9ydCB7IEJ1ZmZlclVzYWdlIH0gZnJvbSAnLi4vYnVmZmVyL2NvbnN0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgVWJvU3lzdGVtIHtcbiAgY29uc3RydWN0b3IoYWRhcHRvcikge1xuICAgIC8qKiBDYWNoZSBvZiB1bmlmb3JtIGJ1ZmZlciBsYXlvdXRzIGFuZCBzeW5jIGZ1bmN0aW9ucywgc28gd2UgZG9uJ3QgaGF2ZSB0byByZS1jcmVhdGUgdGhlbSAqL1xuICAgIHRoaXMuX3N5bmNGdW5jdGlvbkhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9hZGFwdG9yID0gYWRhcHRvcjtcbiAgICB0aGlzLl9zeXN0ZW1DaGVjaygpO1xuICB9XG4gIC8qKlxuICAgKiBPdmVycmlkZWFibGUgZnVuY3Rpb24gYnkgYHBpeGkuanMvdW5zYWZlLWV2YWxgIHRvIHNpbGVuY2VcbiAgICogdGhyb3dpbmcgYW4gZXJyb3IgaWYgcGxhdGZvcm0gZG9lc24ndCBzdXBwb3J0IHVuc2FmZS1ldmFscy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zeXN0ZW1DaGVjaygpIHtcbiAgICBpZiAoIXVuc2FmZUV2YWxTdXBwb3J0ZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBhbGxvdyB1bnNhZmUtZXZhbCwgcGxlYXNlIHVzZSBwaXhpLmpzL3Vuc2FmZS1ldmFsIG1vZHVsZSB0byBlbmFibGUgc3VwcG9ydC5cIik7XG4gICAgfVxuICB9XG4gIGVuc3VyZVVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXApIHtcbiAgICBjb25zdCB1bmlmb3JtRGF0YSA9IHRoaXMuZ2V0VW5pZm9ybUdyb3VwRGF0YSh1bmlmb3JtR3JvdXApO1xuICAgIHVuaWZvcm1Hcm91cC5idWZmZXIgfHwgKHVuaWZvcm1Hcm91cC5idWZmZXIgPSBuZXcgQnVmZmVyKHtcbiAgICAgIGRhdGE6IG5ldyBGbG9hdDMyQXJyYXkodW5pZm9ybURhdGEubGF5b3V0LnNpemUgLyA0KSxcbiAgICAgIHVzYWdlOiBCdWZmZXJVc2FnZS5VTklGT1JNIHwgQnVmZmVyVXNhZ2UuQ09QWV9EU1RcbiAgICB9KSk7XG4gIH1cbiAgZ2V0VW5pZm9ybUdyb3VwRGF0YSh1bmlmb3JtR3JvdXApIHtcbiAgICByZXR1cm4gdGhpcy5fc3luY0Z1bmN0aW9uSGFzaFt1bmlmb3JtR3JvdXAuX3NpZ25hdHVyZV0gfHwgdGhpcy5faW5pdFVuaWZvcm1Hcm91cCh1bmlmb3JtR3JvdXApO1xuICB9XG4gIF9pbml0VW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCkge1xuICAgIGNvbnN0IHVuaWZvcm1Hcm91cFNpZ25hdHVyZSA9IHVuaWZvcm1Hcm91cC5fc2lnbmF0dXJlO1xuICAgIGxldCB1bmlmb3JtRGF0YSA9IHRoaXMuX3N5bmNGdW5jdGlvbkhhc2hbdW5pZm9ybUdyb3VwU2lnbmF0dXJlXTtcbiAgICBpZiAoIXVuaWZvcm1EYXRhKSB7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IE9iamVjdC5rZXlzKHVuaWZvcm1Hcm91cC51bmlmb3JtU3RydWN0dXJlcykubWFwKChpKSA9PiB1bmlmb3JtR3JvdXAudW5pZm9ybVN0cnVjdHVyZXNbaV0pO1xuICAgICAgY29uc3QgbGF5b3V0ID0gdGhpcy5fYWRhcHRvci5jcmVhdGVVYm9FbGVtZW50cyhlbGVtZW50cyk7XG4gICAgICBjb25zdCBzeW5jRnVuY3Rpb24gPSB0aGlzLl9nZW5lcmF0ZVVib1N5bmMobGF5b3V0LnVib0VsZW1lbnRzKTtcbiAgICAgIHVuaWZvcm1EYXRhID0gdGhpcy5fc3luY0Z1bmN0aW9uSGFzaFt1bmlmb3JtR3JvdXBTaWduYXR1cmVdID0ge1xuICAgICAgICBsYXlvdXQsXG4gICAgICAgIHN5bmNGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N5bmNGdW5jdGlvbkhhc2hbdW5pZm9ybUdyb3VwU2lnbmF0dXJlXTtcbiAgfVxuICBfZ2VuZXJhdGVVYm9TeW5jKHVib0VsZW1lbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkYXB0b3IuZ2VuZXJhdGVVYm9TeW5jKHVib0VsZW1lbnRzKTtcbiAgfVxuICBzeW5jVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCwgZGF0YSwgb2Zmc2V0KSB7XG4gICAgY29uc3QgdW5pZm9ybUdyb3VwRGF0YSA9IHRoaXMuZ2V0VW5pZm9ybUdyb3VwRGF0YSh1bmlmb3JtR3JvdXApO1xuICAgIHVuaWZvcm1Hcm91cC5idWZmZXIgfHwgKHVuaWZvcm1Hcm91cC5idWZmZXIgPSBuZXcgQnVmZmVyKHtcbiAgICAgIGRhdGE6IG5ldyBGbG9hdDMyQXJyYXkodW5pZm9ybUdyb3VwRGF0YS5sYXlvdXQuc2l6ZSAvIDQpLFxuICAgICAgdXNhZ2U6IEJ1ZmZlclVzYWdlLlVOSUZPUk0gfCBCdWZmZXJVc2FnZS5DT1BZX0RTVFxuICAgIH0pKTtcbiAgICBkYXRhIHx8IChkYXRhID0gdW5pZm9ybUdyb3VwLmJ1ZmZlci5kYXRhKTtcbiAgICBvZmZzZXQgfHwgKG9mZnNldCA9IDApO1xuICAgIHVuaWZvcm1Hcm91cERhdGEuc3luY0Z1bmN0aW9uKHVuaWZvcm1Hcm91cC51bmlmb3JtcywgZGF0YSwgb2Zmc2V0KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB1cGRhdGVVbmlmb3JtR3JvdXAodW5pZm9ybUdyb3VwKSB7XG4gICAgaWYgKHVuaWZvcm1Hcm91cC5pc1N0YXRpYyAmJiAhdW5pZm9ybUdyb3VwLl9kaXJ0eUlkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHVuaWZvcm1Hcm91cC5fZGlydHlJZCA9IDA7XG4gICAgY29uc3Qgc3luY2VkID0gdGhpcy5zeW5jVW5pZm9ybUdyb3VwKHVuaWZvcm1Hcm91cCk7XG4gICAgdW5pZm9ybUdyb3VwLmJ1ZmZlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3luY2VkO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc3luY0Z1bmN0aW9uSGFzaCA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgVWJvU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VYm9TeXN0ZW0ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8809\n')},9758:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ createUboSyncFunction)\n/* harmony export */ });\n/* harmony import */ var _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6602);\n\n\n"use strict";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .s.length; j++) {\n      const uniformParser = _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .s[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = "${name}";`,\n          `offset += ${offset - prev};`,\n          _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .s[j][parserCode] || _uniformParsers_mjs__WEBPACK_IMPORTED_MODULE_0__/* .uniformParsers */ .s[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join("\\n");\n  return new Function(\n    "uv",\n    "data",\n    "offset",\n    fragmentSrc\n  );\n}\n\n\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc1OC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQXNEOztBQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixJQUFJLHdFQUFjLFNBQVM7QUFDL0MsNEJBQTRCLHdFQUFjO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixLQUFLLEVBQUU7QUFDNUIsdUJBQXVCLGVBQWU7QUFDdEMsVUFBVSx3RUFBYyxtQkFBbUIsd0VBQWM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsZ0NBQWdDO0FBQ2hDLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1iaWxsYm9hcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL3V0aWxzL2NyZWF0ZVVib1N5bmNGdW5jdGlvbi5tanM/ZTZlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1bmlmb3JtUGFyc2VycyB9IGZyb20gJy4vdW5pZm9ybVBhcnNlcnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBjcmVhdGVVYm9TeW5jRnVuY3Rpb24odWJvRWxlbWVudHMsIHBhcnNlckNvZGUsIGFycmF5R2VuZXJhdGlvbkZ1bmN0aW9uLCBzaW5nbGVTZXR0ZXJzTWFwKSB7XG4gIGNvbnN0IGZ1bmNGcmFnbWVudHMgPSBbYFxuICAgICAgICB2YXIgdiA9IG51bGw7XG4gICAgICAgIHZhciB2MiA9IG51bGw7XG4gICAgICAgIHZhciB0ID0gMDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xuICAgICAgICB2YXIgYXJyYXlPZmZzZXQgPSBudWxsO1xuICAgIGBdO1xuICBsZXQgcHJldiA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdWJvRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB1Ym9FbGVtZW50ID0gdWJvRWxlbWVudHNbaV07XG4gICAgY29uc3QgbmFtZSA9IHVib0VsZW1lbnQuZGF0YS5uYW1lO1xuICAgIGxldCBwYXJzZWQgPSBmYWxzZTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHVuaWZvcm1QYXJzZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCB1bmlmb3JtUGFyc2VyID0gdW5pZm9ybVBhcnNlcnNbal07XG4gICAgICBpZiAodW5pZm9ybVBhcnNlci50ZXN0KHVib0VsZW1lbnQuZGF0YSkpIHtcbiAgICAgICAgb2Zmc2V0ID0gdWJvRWxlbWVudC5vZmZzZXQgLyA0O1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goXG4gICAgICAgICAgYG5hbWUgPSBcIiR7bmFtZX1cIjtgLFxuICAgICAgICAgIGBvZmZzZXQgKz0gJHtvZmZzZXQgLSBwcmV2fTtgLFxuICAgICAgICAgIHVuaWZvcm1QYXJzZXJzW2pdW3BhcnNlckNvZGVdIHx8IHVuaWZvcm1QYXJzZXJzW2pdLnVib1xuICAgICAgICApO1xuICAgICAgICBwYXJzZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgIGlmICh1Ym9FbGVtZW50LmRhdGEuc2l6ZSA+IDEpIHtcbiAgICAgICAgb2Zmc2V0ID0gdWJvRWxlbWVudC5vZmZzZXQgLyA0O1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goYXJyYXlHZW5lcmF0aW9uRnVuY3Rpb24odWJvRWxlbWVudCwgb2Zmc2V0IC0gcHJldikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBzaW5nbGVTZXR0ZXJzTWFwW3Vib0VsZW1lbnQuZGF0YS50eXBlXTtcbiAgICAgICAgb2Zmc2V0ID0gdWJvRWxlbWVudC5vZmZzZXQgLyA0O1xuICAgICAgICBmdW5jRnJhZ21lbnRzLnB1c2goXG4gICAgICAgICAgLyogd2dzbCAqL1xuICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICAgICAgdiA9IHV2LiR7bmFtZX07XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAke29mZnNldCAtIHByZXZ9O1xuICAgICAgICAgICAgICAgICAgICAke3RlbXBsYXRlfTtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHByZXYgPSBvZmZzZXQ7XG4gIH1cbiAgY29uc3QgZnJhZ21lbnRTcmMgPSBmdW5jRnJhZ21lbnRzLmpvaW4oXCJcXG5cIik7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXG4gICAgXCJ1dlwiLFxuICAgIFwiZGF0YVwiLFxuICAgIFwib2Zmc2V0XCIsXG4gICAgZnJhZ21lbnRTcmNcbiAgKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlVWJvU3luY0Z1bmN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVVYm9TeW5jRnVuY3Rpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9758\n')},5746:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   R: () => (/* binding */ uboSyncFunctionsWGSL),\n/* harmony export */   d: () => (/* binding */ uboSyncFunctionsSTD40)\n/* harmony export */ });\n\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        data[offset] = v;`,\n  "vec2<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  "vec3<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  "vec4<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  "mat2x2<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  "mat3x3<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  "mat4x4<f32>": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  "mat3x2<f32>": loopMatrix(3, 2),\n  "mat4x2<f32>": loopMatrix(4, 2),\n  "mat2x3<f32>": loopMatrix(2, 3),\n  "mat4x3<f32>": loopMatrix(4, 3),\n  "mat2x4<f32>": loopMatrix(2, 4),\n  "mat3x4<f32>": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  "mat2x2<f32>": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\n\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc0Ni5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsTUFBTSxRQUFRO0FBQ3RDLG1DQUFtQyxJQUFJLG1CQUFtQixJQUFJO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXVEO0FBQ3ZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWJpbGxib2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvdXRpbHMvdWJvU3luY0Z1bmN0aW9ucy5tanM/MzU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGxvb3BNYXRyaXgoY29sLCByb3cpIHtcbiAgY29uc3QgdG90YWwgPSBjb2wgKiByb3c7XG4gIHJldHVybiBgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgJHt0b3RhbH07IGkrKykge1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAoKChpIC8gJHtjb2x9KXwwKSAqIDQpICsgKGkgJSAke2NvbH0pXSA9IHZbaV07XG4gICAgICAgIH1cbiAgICBgO1xufVxuY29uc3QgdWJvU3luY0Z1bmN0aW9uc1NURDQwID0ge1xuICBmMzI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdjtgLFxuICBpMzI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdjtgLFxuICBcInZlYzI8ZjMyPlwiOiBgXG4gICAgICAgIGRhdGFbb2Zmc2V0XSA9IHZbMF07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgMV0gPSB2WzFdO2AsXG4gIFwidmVjMzxmMzI+XCI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdlswXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHZbMV07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2WzJdO2AsXG4gIFwidmVjNDxmMzI+XCI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdlswXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHZbMV07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2WzJdO1xuICAgICAgICBkYXRhW29mZnNldCArIDNdID0gdlszXTtgLFxuICBcIm1hdDJ4MjxmMzI+XCI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdlswXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHZbMV07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgNF0gPSB2WzJdO1xuICAgICAgICBkYXRhW29mZnNldCArIDVdID0gdlszXTtgLFxuICBcIm1hdDN4MzxmMzI+XCI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdlswXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHZbMV07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2WzJdO1xuICAgICAgICBkYXRhW29mZnNldCArIDRdID0gdlszXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyA1XSA9IHZbNF07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgNl0gPSB2WzVdO1xuICAgICAgICBkYXRhW29mZnNldCArIDhdID0gdls2XTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyA5XSA9IHZbN107XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgMTBdID0gdls4XTtgLFxuICBcIm1hdDR4NDxmMzI+XCI6IGBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIGldID0gdltpXTtcbiAgICAgICAgfWAsXG4gIFwibWF0M3gyPGYzMj5cIjogbG9vcE1hdHJpeCgzLCAyKSxcbiAgXCJtYXQ0eDI8ZjMyPlwiOiBsb29wTWF0cml4KDQsIDIpLFxuICBcIm1hdDJ4MzxmMzI+XCI6IGxvb3BNYXRyaXgoMiwgMyksXG4gIFwibWF0NHgzPGYzMj5cIjogbG9vcE1hdHJpeCg0LCAzKSxcbiAgXCJtYXQyeDQ8ZjMyPlwiOiBsb29wTWF0cml4KDIsIDQpLFxuICBcIm1hdDN4NDxmMzI+XCI6IGxvb3BNYXRyaXgoMywgNClcbn07XG5jb25zdCB1Ym9TeW5jRnVuY3Rpb25zV0dTTCA9IHtcbiAgLi4udWJvU3luY0Z1bmN0aW9uc1NURDQwLFxuICBcIm1hdDJ4MjxmMzI+XCI6IGBcbiAgICAgICAgZGF0YVtvZmZzZXRdID0gdlswXTtcbiAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHZbMV07XG4gICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSB2WzJdO1xuICAgICAgICBkYXRhW29mZnNldCArIDNdID0gdlszXTtcbiAgICBgXG59O1xuXG5leHBvcnQgeyB1Ym9TeW5jRnVuY3Rpb25zU1RENDAsIHVib1N5bmNGdW5jdGlvbnNXR1NMIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11Ym9TeW5jRnVuY3Rpb25zLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5746\n')},6602:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ uniformParsers)\n/* harmony export */ });\n\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: "mat3x3<f32>",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: ` \n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: "vec4<f32>",\n    test: (data) => data.type === "vec4<f32>" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: "vec2<f32>",\n    test: (data) => data.type === "vec2<f32>" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: "vec4<f32>",\n    test: (data) => data.type === "vec4<f32>" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: "vec3<f32>",\n    test: (data) => data.type === "vec3<f32>" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\n\n//# sourceMappingURL=uniformParsers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYwMi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWJpbGxib2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvdXRpbHMvdW5pZm9ybVBhcnNlcnMubWpzPzUxMDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB1bmlmb3JtUGFyc2VycyA9IFtcbiAgLy8gdXBsb2FkaW5nIHBpeGkgbWF0cml4IG9iamVjdCB0byBtYXQzXG4gIHtcbiAgICB0eXBlOiBcIm1hdDN4MzxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGF0YS52YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZS5hICE9PSB2b2lkIDA7XG4gICAgfSxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHZhciBtYXRyaXggPSB1dltuYW1lXS50b0FycmF5KHRydWUpO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXRdID0gbWF0cml4WzBdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IG1hdHJpeFsxXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMl0gPSBtYXRyaXhbMl07XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDRdID0gbWF0cml4WzNdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyA1XSA9IG1hdHJpeFs0XTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgNl0gPSBtYXRyaXhbNV07XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDhdID0gbWF0cml4WzZdO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyA5XSA9IG1hdHJpeFs3XTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMTBdID0gbWF0cml4WzhdO1xuICAgICAgICBgLFxuICAgIHVuaWZvcm06IGAgXG4gICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHVkW25hbWVdLmxvY2F0aW9uLCBmYWxzZSwgdXZbbmFtZV0udG9BcnJheSh0cnVlKSk7XG4gICAgICAgIGBcbiAgfSxcbiAgLy8gdXBsb2FkaW5nIGEgcGl4aSByZWN0YW5nbGUgYXMgYSB2ZWM0XG4gIHtcbiAgICB0eXBlOiBcInZlYzQ8ZjMyPlwiLFxuICAgIHRlc3Q6IChkYXRhKSA9PiBkYXRhLnR5cGUgPT09IFwidmVjNDxmMzI+XCIgJiYgZGF0YS5zaXplID09PSAxICYmIGRhdGEudmFsdWUud2lkdGggIT09IHZvaWQgMCxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IHYueDtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMV0gPSB2Lnk7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDJdID0gdi53aWR0aDtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgM10gPSB2LmhlaWdodDtcbiAgICAgICAgYCxcbiAgICB1bmlmb3JtOiBgXG4gICAgICAgICAgICBjdiA9IHVkW25hbWVdLnZhbHVlO1xuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgaWYgKGN2WzBdICE9PSB2LnggfHwgY3ZbMV0gIT09IHYueSB8fCBjdlsyXSAhPT0gdi53aWR0aCB8fCBjdlszXSAhPT0gdi5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBjdlswXSA9IHYueDtcbiAgICAgICAgICAgICAgICBjdlsxXSA9IHYueTtcbiAgICAgICAgICAgICAgICBjdlsyXSA9IHYud2lkdGg7XG4gICAgICAgICAgICAgICAgY3ZbM10gPSB2LmhlaWdodDtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGYodWRbbmFtZV0ubG9jYXRpb24sIHYueCwgdi55LCB2LndpZHRoLCB2LmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgfSxcbiAgLy8gdXBsb2FkaW5nIGEgcGl4aSBwb2ludCBhcyBhIHZlYzJcbiAge1xuICAgIHR5cGU6IFwidmVjMjxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IGRhdGEudHlwZSA9PT0gXCJ2ZWMyPGYzMj5cIiAmJiBkYXRhLnNpemUgPT09IDEgJiYgZGF0YS52YWx1ZS54ICE9PSB2b2lkIDAsXG4gICAgdWJvOiBgXG4gICAgICAgICAgICB2ID0gdXZbbmFtZV07XG4gICAgICAgICAgICBkYXRhW29mZnNldF0gPSB2Lng7XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDFdID0gdi55O1xuICAgICAgICBgLFxuICAgIHVuaWZvcm06IGBcbiAgICAgICAgICAgIGN2ID0gdWRbbmFtZV0udmFsdWU7XG4gICAgICAgICAgICB2ID0gdXZbbmFtZV07XG4gICAgICAgICAgICBpZiAoY3ZbMF0gIT09IHYueCB8fCBjdlsxXSAhPT0gdi55KSB7XG4gICAgICAgICAgICAgICAgY3ZbMF0gPSB2Lng7XG4gICAgICAgICAgICAgICAgY3ZbMV0gPSB2Lnk7XG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTJmKHVkW25hbWVdLmxvY2F0aW9uLCB2LngsIHYueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgfSxcbiAgLy8gdXBsb2FkaW5nIGEgcGl4aSBjb2xvciBhcyBhIHZlYzRcbiAge1xuICAgIHR5cGU6IFwidmVjNDxmMzI+XCIsXG4gICAgdGVzdDogKGRhdGEpID0+IGRhdGEudHlwZSA9PT0gXCJ2ZWM0PGYzMj5cIiAmJiBkYXRhLnNpemUgPT09IDEgJiYgZGF0YS52YWx1ZS5yZWQgIT09IHZvaWQgMCxcbiAgICB1Ym86IGBcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0XSA9IHYucmVkO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAxXSA9IHYuZ3JlZW47XG4gICAgICAgICAgICBkYXRhW29mZnNldCArIDJdID0gdi5ibHVlO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAzXSA9IHYuYWxwaGE7XG4gICAgICAgIGAsXG4gICAgdW5pZm9ybTogYFxuICAgICAgICAgICAgY3YgPSB1ZFtuYW1lXS52YWx1ZTtcbiAgICAgICAgICAgIHYgPSB1dltuYW1lXTtcbiAgICAgICAgICAgIGlmIChjdlswXSAhPT0gdi5yZWQgfHwgY3ZbMV0gIT09IHYuZ3JlZW4gfHwgY3ZbMl0gIT09IHYuYmx1ZSB8fCBjdlszXSAhPT0gdi5hbHBoYSkge1xuICAgICAgICAgICAgICAgIGN2WzBdID0gdi5yZWQ7XG4gICAgICAgICAgICAgICAgY3ZbMV0gPSB2LmdyZWVuO1xuICAgICAgICAgICAgICAgIGN2WzJdID0gdi5ibHVlO1xuICAgICAgICAgICAgICAgIGN2WzNdID0gdi5hbHBoYTtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGYodWRbbmFtZV0ubG9jYXRpb24sIHYucmVkLCB2LmdyZWVuLCB2LmJsdWUsIHYuYWxwaGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gIH0sXG4gIC8vIHVwbG9hZGluZyBhIHBpeGkgY29sb3IgYXMgYSB2ZWMzXG4gIHtcbiAgICB0eXBlOiBcInZlYzM8ZjMyPlwiLFxuICAgIHRlc3Q6IChkYXRhKSA9PiBkYXRhLnR5cGUgPT09IFwidmVjMzxmMzI+XCIgJiYgZGF0YS5zaXplID09PSAxICYmIGRhdGEudmFsdWUucmVkICE9PSB2b2lkIDAsXG4gICAgdWJvOiBgXG4gICAgICAgICAgICB2ID0gdXZbbmFtZV07XG4gICAgICAgICAgICBkYXRhW29mZnNldF0gPSB2LnJlZDtcbiAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgMV0gPSB2LmdyZWVuO1xuICAgICAgICAgICAgZGF0YVtvZmZzZXQgKyAyXSA9IHYuYmx1ZTtcbiAgICAgICAgYCxcbiAgICB1bmlmb3JtOiBgXG4gICAgICAgICAgICBjdiA9IHVkW25hbWVdLnZhbHVlO1xuICAgICAgICAgICAgdiA9IHV2W25hbWVdO1xuICAgICAgICAgICAgaWYgKGN2WzBdICE9PSB2LnJlZCB8fCBjdlsxXSAhPT0gdi5ncmVlbiB8fCBjdlsyXSAhPT0gdi5ibHVlKSB7XG4gICAgICAgICAgICAgICAgY3ZbMF0gPSB2LnJlZDtcbiAgICAgICAgICAgICAgICBjdlsxXSA9IHYuZ3JlZW47XG4gICAgICAgICAgICAgICAgY3ZbMl0gPSB2LmJsdWU7XG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmKHVkW25hbWVdLmxvY2F0aW9uLCB2LnJlZCwgdi5ncmVlbiwgdi5ibHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICB9XG5dO1xuXG5leHBvcnQgeyB1bmlmb3JtUGFyc2VycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pZm9ybVBhcnNlcnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6602\n')},7430:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  U: () => (/* binding */ SharedRenderPipes),\n  N: () => (/* binding */ SharedSystems)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/extensions/Extensions.mjs\nvar Extensions = __webpack_require__(3489);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs\n\n\n"use strict";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "customRender"\n};\n\n\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs\n\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\n\n//# sourceMappingURL=executeInstructions.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs\n\n\n\n"use strict";\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderGroup);\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.worldTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "renderGroup"\n};\n\n\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/matrix/Matrix.mjs\nvar Matrix = __webpack_require__(5321);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs\n\nfunction buildInstructions(renderGroup, renderPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererPipes) {\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderPipes) {\n  if (container.renderPipeId) {\n    renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n    container.didViewUpdate = false;\n    const rp = renderPipes;\n    rp[container.renderPipeId].addRenderable(container, instructionSet);\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderPipes);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderPipes, isRoot) {\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderPipeId = container.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n      container.didViewUpdate = false;\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(container, instructionSet);\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderPipes);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\n\n//# sourceMappingURL=buildInstructions.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/collectRenderGroups.mjs\n\nfunction collectRenderGroups(renderGroup, out = []) {\n  out.push(renderGroup);\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n  }\n  return out;\n}\n\n\n//# sourceMappingURL=collectRenderGroups.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/Container.mjs + 12 modules\nvar Container = __webpack_require__(8400);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/mixHexColors.mjs\n\nfunction mixHexColors_mixHexColors(color1, color2, ratio) {\n  const r1 = color1 >> 16 & 255;\n  const g1 = color1 >> 8 & 255;\n  const b1 = color1 & 255;\n  const r2 = color2 >> 16 & 255;\n  const g2 = color2 >> 8 & 255;\n  const b2 = color2 & 255;\n  const r = r1 + (r2 - r1) * ratio;\n  const g = g1 + (g2 - g1) * ratio;\n  const b = b1 + (b2 - b1) * ratio;\n  return (r << 16) + (g << 8) + b;\n}\n\n\n//# sourceMappingURL=mixHexColors.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/mixColors.mjs\n\n\n"use strict";\nconst WHITE_BGR = 16777215;\nfunction mixColors(localBGRColor, parentBGRColor) {\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    return localBGRColor + parentBGRColor - WHITE_BGR;\n  }\n  return mixHexColors_mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\nfunction mixStandardAnd32BitColors(localColorRGB, localAlpha, parentColor) {\n  const parentAlpha = (parentColor >> 24 & 255) / 255;\n  const globalAlpha = localAlpha * parentAlpha * 255;\n  const localBGRColor = ((localColorRGB & 255) << 16) + (localColorRGB & 65280) + (localColorRGB >> 16 & 255);\n  const parentBGRColor = parentColor & 16777215;\n  let sharedBGRColor;\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n  } else {\n    sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n  }\n  return sharedBGRColor + (globalAlpha << 24);\n}\n\n\n//# sourceMappingURL=mixColors.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs\n\n\n\n"use strict";\nconst tempContainer = new Container/* Container */.W2();\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = mixColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags = updateFlags | container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    if (container.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & Container/* UPDATE_COLOR */.wO) {\n    container.groupColor = mixColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & Container/* UPDATE_BLEND */.pA) {\n    container.groupBlendMode = container.localBlendMode === "inherit" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & Container/* UPDATE_VISIBLE */.Jm) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\n\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs\n\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\n\n//# sourceMappingURL=validateRenderables.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs\n\n\n\n\n\n\n\n\n"use strict";\nconst tempMatrix = new Matrix/* Matrix */.y();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    container.isRenderGroup = true;\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const renderGroups = collectRenderGroups(container.renderGroup, []);\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    for (let i = 0; i < renderGroups.length; i++) {\n      const renderGroup = renderGroups[i];\n      renderGroup.runOnRender();\n      renderGroup.instructionSet.renderPipes = renderPipes;\n      if (!renderGroup.structureDidChange) {\n        validateRenderables(renderGroup, renderPipes);\n      }\n      updateRenderGroupTransforms(renderGroup);\n      if (renderGroup.structureDidChange) {\n        renderGroup.structureDidChange = false;\n        buildInstructions(renderGroup, renderPipes);\n      } else {\n        updateRenderables(renderGroup);\n      }\n      renderGroup.childrenRenderablesToUpdate.index = 0;\n      renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    }\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem,\n    Extensions/* ExtensionType */.nw.CanvasSystem\n  ],\n  name: "renderGroup"\n};\nfunction updateRenderables(renderGroup) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    if (container.didViewUpdate) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\n\n\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/pool/PoolGroup.mjs\nvar PoolGroup = __webpack_require__(5906);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs\nvar BatchableSprite = __webpack_require__(900);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs\n\n\n\n\n"use strict";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, _instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite._didSpriteUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite.batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const texture = sprite._texture;\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (gpuSprite.texture._source !== texture._source) {\n      return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n    }\n    return false;\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    PoolGroup/* BigPool */.u.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    sprite._didSpriteUpdate = false;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = PoolGroup/* BigPool */.u.get(BatchableSprite/* BatchableSprite */.c);\n    batchableSprite.renderable = sprite;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.bounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite._didSpriteUpdate = false;\n    sprite.on("destroyed", () => {\n      this.destroyRenderable(sprite);\n    });\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      PoolGroup/* BigPool */.u.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "sprite"\n};\n\n\n//# sourceMappingURL=SpritePipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs\nvar State = __webpack_require__(6798);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/batcher/gpu/BatchGeometry.mjs\nvar BatchGeometry = __webpack_require__(2971);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/batcher/shared/Batcher.mjs + 3 modules\nvar Batcher = __webpack_require__(2067);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs\n\n\n\n\n\n"use strict";\nclass BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State/* State */.Z.for2d();\n    this._batches = /* @__PURE__ */ Object.create(null);\n    this._geometries = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init(this);\n  }\n  buildStart(instructionSet) {\n    if (!this._batches[instructionSet.uid]) {\n      const batcher = new Batcher/* Batcher */.m();\n      this._batches[instructionSet.uid] = batcher;\n      this._geometries[batcher.uid] = new BatchGeometry/* BatchGeometry */.J();\n    }\n    this._activeBatch = this._batches[instructionSet.uid];\n    this._activeGeometry = this._geometries[this._activeBatch.uid];\n    this._activeBatch.begin();\n  }\n  addToBatch(batchableObject) {\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    const activeBatch = this._activeBatch;\n    const geometry = this._activeGeometry;\n    activeBatch.finish(instructionSet);\n    geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n    geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n  }\n  upload(instructionSet) {\n    const batcher = this._batches[instructionSet.uid];\n    const geometry = this._geometries[batcher.uid];\n    if (batcher.dirty) {\n      batcher.dirty = false;\n      geometry.buffers[0].update(batcher.attributeSize * 4);\n    }\n  }\n  execute(batch) {\n    if (batch.action === "startBatch") {\n      const batcher = batch.batcher;\n      const geometry = this._geometries[batcher.uid];\n      this._adaptor.start(this, geometry);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    for (const i in this._batches) {\n      this._batches[i].destroy();\n    }\n    this._batches = null;\n    for (const i in this._geometries) {\n      this._geometries[i].destroy();\n    }\n    this._geometries = null;\n  }\n}\n/** @ignore */\nBatcherPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "batch"\n};\n\n\n//# sourceMappingURL=BatcherPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/filters/FilterEffect.mjs\nvar FilterEffect = __webpack_require__(6282);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs + 6 modules\nvar GlProgram = __webpack_require__(749);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs + 6 modules\nvar GpuProgram = __webpack_require__(1982);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs + 2 modules\nvar UniformGroup = __webpack_require__(4537);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureMatrix.mjs\nvar TextureMatrix = __webpack_require__(575);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs\nvar Shader = __webpack_require__(2267);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/Filter.mjs\n\n\n\n\n\n"use strict";\nconst _Filter = class _Filter extends Shader/* Shader */.e {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    this._state = State/* State */.Z.for2d();\n    this.padding = options.padding;\n    if (typeof options.antialias === "boolean") {\n      this.antialias = options.antialias ? "on" : "off";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.addResource("uTexture", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default "normal"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram/* GpuProgram */.O.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram/* GlProgram */.J.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/**\n * The default filter settings\n * @static\n */\n_Filter.defaultOptions = {\n  blendMode: "normal",\n  resolution: 1,\n  padding: 0,\n  antialias: "off",\n  blendRequired: false\n};\nlet Filter = _Filter;\n\n\n//# sourceMappingURL=Filter.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/mask.frag.mjs\nvar fragment = "in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha; \\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    original *= (alphaMul * masky.r * uAlpha * clip);\\n\\n    finalColor = original;\\n}\\n";\n\n\n//# sourceMappingURL=mask.frag.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/mask.vert.mjs\nvar vertex = "in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n";\n\n\n//# sourceMappingURL=mask.vert.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs\nvar source = "struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,  \\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n};\\n\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n  };\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n\\n  \\n  return gfu.uGlobalFrame.zw;\\n}\\n  \\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>, \\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n\\n     var clip = step(3.5,\\n        step(maskClamp.x, filterUv.x) +\\n        step(maskClamp.y, filterUv.y) +\\n        step(filterUv.x, maskClamp.z) +\\n        step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    \\n    var npmAlpha = 0.0;\\n\\n    var alphaMul = 1.0 - npmAlpha * (1.0 - mask.a);\\n\\n    var a = (alphaMul * mask.r) * clip;\\n\\n    return vec4(source.rgb, source.a) * a;\\n}";\n\n\n//# sourceMappingURL=mask.wgsl.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs\n\n\n\n\n\n\n\n\n\n\n"use strict";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix/* TextureMatrix */.U(sprite.texture);\n    const filterUniforms = new UniformGroup/* UniformGroup */.o({\n      uFilterMatrix: { value: new Matrix/* Matrix */.y(), type: "mat3x3<f32>" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: "vec4<f32>" },\n      uAlpha: { value: 1, type: "f32" }\n    });\n    const gpuProgram = GpuProgram/* GpuProgram */.O.from({\n      vertex: {\n        source: source,\n        entryPoint: "mainVertex"\n      },\n      fragment: {\n        source: source,\n        entryPoint: "mainFragment"\n      }\n    });\n    const glProgram = GlProgram/* GlProgram */.J.from({\n      vertex: vertex,\n      fragment: fragment,\n      name: "mask-filter"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\n\n//# sourceMappingURL=MaskFilter.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/bounds/Bounds.mjs\nvar Bounds = __webpack_require__(535);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/bounds/getGlobalBounds.mjs\nvar getGlobalBounds = __webpack_require__(5128);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/sprite/Sprite.mjs\nvar Sprite = __webpack_require__(5263);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs + 2 modules\nvar Texture = __webpack_require__(9853);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TexturePool.mjs\nvar TexturePool = __webpack_require__(6669);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs\n\n\n\n\n\n\n\n\n\n\n\n"use strict";\nconst tempBounds = new Bounds/* Bounds */.Y();\nclass AlphaMaskEffect extends FilterEffect/* FilterEffect */.U {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite/* Sprite */.j(Texture/* Texture */.x.EMPTY)\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "alphaMask",\n      action: "pushMaskBegin",\n      mask,\n      canBundle: false,\n      maskedContainer\n    });\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer.renderPipes\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "alphaMask",\n      action: "pushMaskEnd",\n      mask,\n      maskedContainer,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "alphaMask",\n      action: "popMaskEnd",\n      mask,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === "pushMaskBegin") {\n      const filterEffect = PoolGroup/* BigPool */.u.get(AlphaMaskEffect);\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = (0,getGlobalBounds/* getGlobalBounds */.qW)(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const filterTexture = TexturePool/* TexturePool */.z.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          1,\n          false\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === "pushMaskEnd") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: "filter",\n        action: "pushFilter",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === "popMaskEnd") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool/* TexturePool */.z.returnTexture(maskData.filterTexture);\n      }\n      PoolGroup/* BigPool */.u.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "alphaMask"\n};\n\n\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs\n\n\n"use strict";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: "colorMask",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: "colorMask",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "colorMask"\n};\n\n\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs\nvar gl_const = __webpack_require__(6582);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs\nvar state_const = __webpack_require__(2475);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs\n\n\n\n\n\n"use strict";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, "none", instructionSet);\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "pushMaskBegin",\n      mask,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer.renderPipes\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "pushMaskEnd",\n      mask,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, "none", instructionSet);\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "popMaskBegin",\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: "stencilMask",\n      action: "popMaskEnd",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === "pushMaskBegin") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.D.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === "pushMaskEnd") {\n      renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.D.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === "popMaskBegin") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.D.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, gl_const/* CLEAR */.E.STENCIL);\n        renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.D.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === "popMaskEnd") {\n      renderer.stencil.setStencilMode(state_const/* STENCIL_MODES */.D.MASK_ACTIVE, maskStackIndex);\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "stencilMask"\n};\n\n\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/color/Color.mjs + 2 modules\nvar Color = __webpack_require__(8409);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs\n\n\n\n"use strict";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color/* Color */.I(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem,\n    Extensions/* ExtensionType */.nw.CanvasSystem\n  ],\n  name: "background",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\n\n//# sourceMappingURL=BackgroundSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/logging/warn.mjs\nvar warn = __webpack_require__(4796);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs\n\n\n\n\n"use strict";\nconst BLEND_MODE_FILTERS = {};\nExtensions/* extensions */.Rw.handle(Extensions/* ExtensionType */.nw.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error("BlendMode extension must have a name property");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      (0,warn/* warn */.Z)(`Unable to assign BlendMode: \'${blendMode}\'. You may want to include: import \'pixi.js/advanced-blend-modes\'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect/* FilterEffect */.U();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: "filter",\n      action: "pushFilter",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: "filter",\n      action: "popFilter",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLPipes,\n    Extensions/* ExtensionType */.nw.WebGPUPipes,\n    Extensions/* ExtensionType */.nw.CanvasPipes\n  ],\n  name: "blendMode"\n};\n\n\n//# sourceMappingURL=BlendModePipe.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs\n\n\n\n\n"use strict";\nconst imageTypes = {\n  png: "image/png",\n  jpg: "image/jpeg",\n  webp: "image/webp"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container/* Container */.W2 || options instanceof Texture/* Texture */.x) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error("ICanvas.toBlob failed!"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error("Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture/* Texture */.x) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy();\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture/* Texture */.x ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container/* Container */.W2) {\n      texture.destroy();\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture/* Texture */.x)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement("a");\n    link.download = options.filename ?? "image.png";\n    link.href = canvas.toDataURL("image/png");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what\'s happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      "font-size: 1px;",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      "background-size: contain;"\n    ].join(" ");\n    console.log("%c ", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem\n  ],\n  name: "extract"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: "png",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\n\n//# sourceMappingURL=ExtractSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs\nvar Rectangle = __webpack_require__(3904);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/container/bounds/getLocalBounds.mjs\nvar getLocalBounds = __webpack_require__(3197);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs + 2 modules\nvar TextureSource = __webpack_require__(5206);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs\n\n\n\n"use strict";\nclass RenderTexture extends Texture/* Texture */.x {\n  static create(options) {\n    return new Texture/* Texture */.x({\n      source: new TextureSource/* TextureSource */.p(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\n\n//# sourceMappingURL=RenderTexture.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs\n\n\n\n\n\n\n\n\n\n"use strict";\nconst tempRect = new Rectangle/* Rectangle */.A();\nconst GenerateTextureSystem_tempBounds = new Bounds/* Bounds */.Y();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer\'s resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container/* Container */.W2) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color/* Color */.I.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || (0,getLocalBounds/* getLocalBounds */.a)(container, GenerateTextureSystem_tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix/* Matrix */.y.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem\n  ],\n  name: "textureGenerator"\n};\n\n\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/maths/point/Point.mjs\nvar Point = __webpack_require__(1134);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs\nvar colorToUniform = __webpack_require__(9989);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/BindGroup.mjs\nvar BindGroup = __webpack_require__(9818);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/types.mjs\nvar types = __webpack_require__(5765);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs\n\n\n\n\n\n\n\n\n"use strict";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix/* Matrix */.y(),\n      worldColor: 4294967295,\n      offset: new Point/* Point */.E()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    (0,colorToUniform/* color32BitToUniform */.V)(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup/* BindGroup */.v();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === types/* RendererType */.g.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup/* UniformGroup */.o({\n      uProjectionMatrix: { value: new Matrix/* Matrix */.y(), type: "mat3x3<f32>" },\n      uWorldTransformMatrix: { value: new Matrix/* Matrix */.y(), type: "mat3x3<f32>" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: "vec4<f32>" },\n      uResolution: { value: [0, 0], type: "vec2<f32>" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem,\n    Extensions/* ExtensionType */.nw.CanvasSystem\n  ],\n  name: "globalUniforms"\n};\n\n\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/sayHello.mjs\nvar sayHello = __webpack_require__(3921);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs\n\n\n\n\n"use strict";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === types/* RendererType */.g.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      (0,sayHello/* sayHello */.D)(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem,\n    Extensions/* ExtensionType */.nw.CanvasSystem\n  ],\n  name: "hello",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\n\n//# sourceMappingURL=HelloSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs\n\n\n"use strict";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem\n  ],\n  name: "textureGC"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCAMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\nExtensions/* extensions */.Rw.add(TextureGCSystem);\n\n\n//# sourceMappingURL=TextureGCSystem.mjs.map\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/environment/adapter.mjs + 1 modules\nvar adapter = __webpack_require__(3646);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/logging/deprecation.mjs\nvar deprecation = __webpack_require__(156);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs\nvar RenderTarget = __webpack_require__(1826);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs\nvar getCanvasTexture = __webpack_require__(1604);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs\n\n\n\n\n\n\n\n"use strict";\nconst _ViewSystem = class _ViewSystem {\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      (0,deprecation/* deprecation */.a)(deprecation/* v8_0_0 */.P, "ViewSystem.view has been renamed to ViewSystem.canvas");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle/* Rectangle */.A(0, 0, options.width, options.height);\n    this.canvas = options.canvas || adapter/* DOMAdapter */.z.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = (0,getCanvasTexture/* getCanvasTexture */.t)(this.canvas, options);\n    this.renderTarget = new RenderTarget/* RenderTarget */.A({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.multiView = !!options.multiView;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${this.texture.width}px`;\n      this.canvas.style.height = `${this.texture.height}px`;\n    }\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${desiredScreenWidth}px`;\n      this.canvas.style.height = `${desiredScreenHeight}px`;\n    }\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or "false".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === "boolean" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    Extensions/* ExtensionType */.nw.WebGLSystem,\n    Extensions/* ExtensionType */.nw.WebGPUSystem,\n    Extensions/* ExtensionType */.nw.CanvasSystem\n  ],\n  name: "view",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\n\n//# sourceMappingURL=ViewSystem.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"use strict";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\n\n//# sourceMappingURL=SharedSystems.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7430\n')},1604:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   t: () => (/* binding */ getCanvasTexture)\n/* harmony export */ });\n/* unused harmony export hasCachedCanvasTexture */\n/* harmony import */ var _sources_CanvasSource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6914);\n/* harmony import */ var _Texture_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9853);\n\n\n\n"use strict";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new _Texture_mjs__WEBPACK_IMPORTED_MODULE_0__/* .Texture */ .x({\n      source: new _sources_CanvasSource_mjs__WEBPACK_IMPORTED_MODULE_1__/* .CanvasSource */ .D({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once("destroy", onDestroy);\n    texture.source.once("destroy", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\n\n//# sourceMappingURL=getCanvasTexture.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkQ7QUFDbEI7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDBEQUFPO0FBQy9CLGtCQUFrQiw0RUFBWTtBQUM5QjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVvRDtBQUNwRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1iaWxsYm9hcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS91dGlscy9nZXRDYW52YXNUZXh0dXJlLm1qcz8wMTUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbnZhc1NvdXJjZSB9IGZyb20gJy4uL3NvdXJjZXMvQ2FudmFzU291cmNlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vVGV4dHVyZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IGNhbnZhc0NhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldENhbnZhc1RleHR1cmUoY2FudmFzLCBvcHRpb25zKSB7XG4gIGlmICghY2FudmFzQ2FjaGUuaGFzKGNhbnZhcykpIHtcbiAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoe1xuICAgICAgc291cmNlOiBuZXcgQ2FudmFzU291cmNlKHtcbiAgICAgICAgcmVzb3VyY2U6IGNhbnZhcyxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSlcbiAgICB9KTtcbiAgICBjb25zdCBvbkRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICBpZiAoY2FudmFzQ2FjaGUuZ2V0KGNhbnZhcykgPT09IHRleHR1cmUpIHtcbiAgICAgICAgY2FudmFzQ2FjaGUuZGVsZXRlKGNhbnZhcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0ZXh0dXJlLm9uY2UoXCJkZXN0cm95XCIsIG9uRGVzdHJveSk7XG4gICAgdGV4dHVyZS5zb3VyY2Uub25jZShcImRlc3Ryb3lcIiwgb25EZXN0cm95KTtcbiAgICBjYW52YXNDYWNoZS5zZXQoY2FudmFzLCB0ZXh0dXJlKTtcbiAgfVxuICByZXR1cm4gY2FudmFzQ2FjaGUuZ2V0KGNhbnZhcyk7XG59XG5mdW5jdGlvbiBoYXNDYWNoZWRDYW52YXNUZXh0dXJlKGNhbnZhcykge1xuICByZXR1cm4gY2FudmFzQ2FjaGUuaGFzKGNhbnZhcyk7XG59XG5cbmV4cG9ydCB7IGdldENhbnZhc1RleHR1cmUsIGhhc0NhY2hlZENhbnZhc1RleHR1cmUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENhbnZhc1RleHR1cmUubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1604\n')}}]);