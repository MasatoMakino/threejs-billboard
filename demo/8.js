"use strict";(self.webpackChunk_masatomakino_threejs_billboard=self.webpackChunk_masatomakino_threejs_billboard||[]).push([[8],{8157:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  o: () => (/* binding */ compileHighShaderGlProgram),\n  d: () => (/* binding */ compileHighShaderGpuProgram)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs + 6 modules\nvar GlProgram = __webpack_require__(749);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs + 6 modules\nvar GpuProgram = __webpack_require__(1982);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/logging/warn.mjs\nvar warn = __webpack_require__(4796);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/addBits.mjs\n\n\n"use strict";\nfunction addBits(srcParts, parts, name) {\n  if (srcParts) {\n    for (const i in srcParts) {\n      const id = i.toLocaleLowerCase();\n      const part = parts[id];\n      if (part) {\n        let sanitisedPart = srcParts[i];\n        if (i === "header") {\n          sanitisedPart = sanitisedPart.replace(/@in\\s+[^;]+;\\s*/g, "").replace(/@out\\s+[^;]+;\\s*/g, "");\n        }\n        if (name) {\n          part.push(`//----${name}----//`);\n        }\n        part.push(sanitisedPart);\n      } else {\n        (0,warn/* warn */.Z)(`${i} placement hook does not exist in shader`);\n      }\n    }\n  }\n}\n\n\n//# sourceMappingURL=addBits.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileHooks.mjs\n\nconst findHooksRx = /\\{\\{(.*?)\\}\\}/g;\nfunction compileHooks(programSrc) {\n  const parts = {};\n  const partMatches = programSrc.match(findHooksRx)?.map((hook) => hook.replace(/[{()}]/g, "")) ?? [];\n  partMatches.forEach((hook) => {\n    parts[hook] = [];\n  });\n  return parts;\n}\n\n\n//# sourceMappingURL=compileHooks.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileInputs.mjs\n\nfunction extractInputs(fragmentSource, out) {\n  let match;\n  const regex = /@in\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction compileInputs(fragments, template, sort = false) {\n  const results = [];\n  extractInputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractInputs(fragment.header, results);\n    }\n  });\n  const mainInput = results;\n  if (sort) {\n    mainInput.sort();\n  }\n  const finalString = mainInput.map((inValue, i) => `       @location(${i}) ${inValue},`).join("\\n");\n  let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, "");\n  cleanedString = cleanedString.replace("{{in}}", `\n${finalString}\n`);\n  return cleanedString;\n}\n\n\n//# sourceMappingURL=compileInputs.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/compileOutputs.mjs\n\nfunction extractOutputs(fragmentSource, out) {\n  let match;\n  const regex = /@out\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction extractVariableName(value) {\n  const regex = /\\b(\\w+)\\s*:/g;\n  const match = regex.exec(value);\n  return match ? match[1] : "";\n}\nfunction stripVariable(value) {\n  const regex = /@.*?\\s+/g;\n  return value.replace(regex, "");\n}\nfunction compileOutputs(fragments, template) {\n  const results = [];\n  extractOutputs(template, results);\n  fragments.forEach((fragment) => {\n    if (fragment.header) {\n      extractOutputs(fragment.header, results);\n    }\n  });\n  let index = 0;\n  const mainStruct = results.sort().map((inValue) => {\n    if (inValue.indexOf("builtin") > -1) {\n      return inValue;\n    }\n    return `@location(${index++}) ${inValue}`;\n  }).join(",\\n");\n  const mainStart = results.sort().map((inValue) => `       var ${stripVariable(inValue)};`).join("\\n");\n  const mainEnd = `return VSOutput(\n                ${results.sort().map((inValue) => ` ${extractVariableName(inValue)}`).join(",\\n")});`;\n  let compiledCode = template.replace(/@out\\s+[^;]+;\\s*/g, "");\n  compiledCode = compiledCode.replace("{{struct}}", `\n${mainStruct}\n`);\n  compiledCode = compiledCode.replace("{{start}}", `\n${mainStart}\n`);\n  compiledCode = compiledCode.replace("{{return}}", `\n${mainEnd}\n`);\n  return compiledCode;\n}\n\n\n//# sourceMappingURL=compileOutputs.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/utils/injectBits.mjs\n\nfunction injectBits(templateSrc, fragmentParts) {\n  let out = templateSrc;\n  for (const i in fragmentParts) {\n    const parts = fragmentParts[i];\n    const toInject = parts.join("\\n");\n    if (toInject.length) {\n      out = out.replace(`{{${i}}}`, `//-----${i} START-----//\n${parts.join("\\n")}\n//----${i} FINISH----//`);\n    } else {\n      out = out.replace(`{{${i}}}`, "");\n    }\n  }\n  return out;\n}\n\n\n//# sourceMappingURL=injectBits.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compiler/compileHighShader.mjs\n\n\n\n\n\n\n"use strict";\nconst cacheMap = /* @__PURE__ */ Object.create(null);\nconst bitCacheMap = /* @__PURE__ */ new Map();\nlet CACHE_UID = 0;\nfunction compileHighShader({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  const { vertex, fragment } = compileInputsAndOutputs(template, bits);\n  cacheMap[cacheId] = compileBits(vertex, fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileHighShaderGl({\n  template,\n  bits\n}) {\n  const cacheId = generateCacheId(template, bits);\n  if (cacheMap[cacheId])\n    return cacheMap[cacheId];\n  cacheMap[cacheId] = compileBits(template.vertex, template.fragment, bits);\n  return cacheMap[cacheId];\n}\nfunction compileInputsAndOutputs(template, bits) {\n  const vertexFragments = bits.map((shaderBit) => shaderBit.vertex).filter((v) => !!v);\n  const fragmentFragments = bits.map((shaderBit) => shaderBit.fragment).filter((v) => !!v);\n  let compiledVertex = compileInputs(vertexFragments, template.vertex, true);\n  compiledVertex = compileOutputs(vertexFragments, compiledVertex);\n  const compiledFragment = compileInputs(fragmentFragments, template.fragment, true);\n  return {\n    vertex: compiledVertex,\n    fragment: compiledFragment\n  };\n}\nfunction generateCacheId(template, bits) {\n  return bits.map((highFragment) => {\n    if (!bitCacheMap.has(highFragment)) {\n      bitCacheMap.set(highFragment, CACHE_UID++);\n    }\n    return bitCacheMap.get(highFragment);\n  }).sort((a, b) => a - b).join("-") + template.vertex + template.fragment;\n}\nfunction compileBits(vertex, fragment, bits) {\n  const vertexParts = compileHooks(vertex);\n  const fragmentParts = compileHooks(fragment);\n  bits.forEach((shaderBit) => {\n    addBits(shaderBit.vertex, vertexParts, shaderBit.name);\n    addBits(shaderBit.fragment, fragmentParts, shaderBit.name);\n  });\n  return {\n    vertex: injectBits(vertex, vertexParts),\n    fragment: injectBits(fragment, fragmentParts)\n  };\n}\n\n\n//# sourceMappingURL=compileHighShader.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/defaultProgramTemplate.mjs\n\nconst vertexGPUTemplate = (\n  /* wgsl */\n  `\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n        var uv = aUV;\n\n        {{start}}\n        \n        vColor = vec4<f32>(1., 1., 1., 1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n       \n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n`\n);\nconst fragmentGPUTemplate = (\n  /* wgsl */\n  `\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n   \n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n        \n        {{start}}\n\n        var outColor:vec4<f32>;\n      \n        {{main}}\n        \n        return outColor * vColor;\n      };\n`\n);\nconst vertexGlTemplate = (\n  /* glsl */\n  `\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n        vec2 uv = aUV;\n        \n        {{start}}\n        \n        vColor = vec4(1.);\n        \n        {{main}}\n        \n        vUV = uv;\n        \n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n`\n);\nconst fragmentGlTemplate = (\n  /* glsl */\n  `\n   \n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n        \n        {{start}}\n\n        vec4 outColor;\n      \n        {{main}}\n        \n        finalColor = outColor * vColor;\n    }\n`\n);\n\n\n//# sourceMappingURL=defaultProgramTemplate.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/globalUniformsBit.mjs\n\nconst globalUniformsBit = {\n  name: "global-uniforms-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        `\n    )\n  }\n};\nconst globalUniformsUBOBitGl = {\n  name: "global-uniforms-ubo-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform globalUniforms {\n            mat3 uProjectionMatrix;\n            mat3 uWorldTransformMatrix;\n            vec4 uWorldColorAlpha;\n            vec2 uResolution;\n          };\n        `\n    )\n  }\n};\nconst globalUniformsBitGl = {\n  name: "global-uniforms-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=globalUniformsBit.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/high-shader/compileHighShaderToProgram.mjs\n\n\n\n\n\n\n"use strict";\nfunction compileHighShaderGpuProgram({ bits, name }) {\n  const source = compileHighShader({\n    template: {\n      fragment: fragmentGPUTemplate,\n      vertex: vertexGPUTemplate\n    },\n    bits: [\n      globalUniformsBit,\n      ...bits\n    ]\n  });\n  return GpuProgram/* GpuProgram */.O.from({\n    name,\n    vertex: {\n      source: source.vertex,\n      entryPoint: "main"\n    },\n    fragment: {\n      source: source.fragment,\n      entryPoint: "main"\n    }\n  });\n}\nfunction compileHighShaderGlProgram({ bits, name }) {\n  return new GlProgram/* GlProgram */.J({\n    name,\n    ...compileHighShaderGl({\n      template: {\n        vertex: vertexGlTemplate,\n        fragment: fragmentGlTemplate\n      },\n      bits: [\n        globalUniformsBitGl,\n        ...bits\n      ]\n    })\n  });\n}\n\n\n//# sourceMappingURL=compileHighShaderToProgram.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8157\n')},2110:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   M: () => (/* binding */ colorBit),\n/* harmony export */   T: () => (/* binding */ colorBitGl)\n/* harmony export */ });\n\nconst colorBit = {\n  name: "color-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            @in aColor: vec4<f32>;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\nconst colorBitGl = {\n  name: "color-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            in vec4 aColor;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=colorBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjExMC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9jb2xvckJpdC5tanM/ZTcwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGNvbG9yQml0ID0ge1xuICBuYW1lOiBcImNvbG9yLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIEBpbiBhQ29sb3I6IHZlYzQ8ZjMyPjtcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdkNvbG9yICo9IHZlYzQ8ZjMyPihhQ29sb3IucmdiICogYUNvbG9yLmEsIGFDb2xvci5hKTtcbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IGNvbG9yQml0R2wgPSB7XG4gIG5hbWU6IFwiY29sb3ItYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgaW4gdmVjNCBhQ29sb3I7XG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHZDb2xvciAqPSB2ZWM0KGFDb2xvci5yZ2IgKiBhQ29sb3IuYSwgYUNvbG9yLmEpO1xuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyBjb2xvckJpdCwgY29sb3JCaXRHbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3JCaXQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2110\n')},6600:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   h: () => (/* binding */ generateTextureBatchBitGl),\n/* harmony export */   m: () => (/* binding */ generateTextureBatchBit)\n/* harmony export */ });\n\nconst textureBatchBitGpuCache = {};\nfunction generateBindingSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push("@group(1) @binding(0) var textureSource1: texture_2d<f32>;");\n    src.push("@group(1) @binding(1) var textureSampler1: sampler;");\n  } else {\n    let bindingIndex = 0;\n    for (let i = 0; i < maxTextures; i++) {\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSource${i + 1}: texture_2d<f32>;`);\n      src.push(`@group(1) @binding(${bindingIndex++}) var textureSampler${i + 1}: sampler;`);\n    }\n  }\n  return src.join("\\n");\n}\nfunction generateSampleSrc(maxTextures) {\n  const src = [];\n  if (maxTextures === 1) {\n    src.push("outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);");\n  } else {\n    src.push("switch vTextureId {");\n    for (let i = 0; i < maxTextures; i++) {\n      if (i === maxTextures - 1) {\n        src.push(`  default:{`);\n      } else {\n        src.push(`  case ${i}:{`);\n      }\n      src.push(`      outColor = textureSampleGrad(textureSource${i + 1}, textureSampler${i + 1}, vUV, uvDx, uvDy);`);\n      src.push(`      break;}`);\n    }\n    src.push(`}`);\n  }\n  return src.join("\\n");\n}\nfunction generateTextureBatchBit(maxTextures) {\n  if (!textureBatchBitGpuCache[maxTextures]) {\n    textureBatchBitGpuCache[maxTextures] = {\n      name: "texture-batch-bit",\n      vertex: {\n        header: `\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                @in @interpolate(flat) vTextureId: u32;\n\n                ${generateBindingSrc(maxTextures)}\n            `,\n        main: `\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n\n                ${generateSampleSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGpuCache[maxTextures];\n}\nconst textureBatchBitGlCache = {};\nfunction generateSampleGlSrc(maxTextures) {\n  const src = [];\n  for (let i = 0; i < maxTextures; i++) {\n    if (i > 0) {\n      src.push("else");\n    }\n    if (i < maxTextures - 1) {\n      src.push(`if(vTextureId < ${i}.5)`);\n    }\n    src.push("{");\n    src.push(`\toutColor = texture(uTextures[${i}], vUV);`);\n    src.push("}");\n  }\n  return src.join("\\n");\n}\nfunction generateTextureBatchBitGl(maxTextures) {\n  if (!textureBatchBitGlCache[maxTextures]) {\n    textureBatchBitGlCache[maxTextures] = {\n      name: "texture-batch-bit",\n      vertex: {\n        header: `\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n\n            `,\n        main: `\n                vTextureId = aTextureIdAndRound.y;\n            `,\n        end: `\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            `\n      },\n      fragment: {\n        header: `\n                in float vTextureId;\n\n                uniform sampler2D uTextures[${maxTextures}];\n\n            `,\n        main: `\n\n                ${generateSampleGlSrc(maxTextures)}\n            `\n      }\n    };\n  }\n  return textureBatchBitGlCache[maxTextures];\n}\n\n\n//# sourceMappingURL=generateTextureBatchBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYwMC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RSxpRUFBaUU7QUFDakUsSUFBSTtBQUNKO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQyxxQ0FBcUMsZUFBZSxxQkFBcUIsTUFBTSxrQkFBa0I7QUFDakcscUNBQXFDLGVBQWUsc0JBQXNCLE1BQU0sVUFBVTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RjtBQUM3RixJQUFJO0FBQ0osaUNBQWlDO0FBQ2pDLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQSw2QkFBNkI7QUFDN0IsUUFBUTtBQUNSLDJCQUEyQixFQUFFLEVBQUU7QUFDL0I7QUFDQSxrRUFBa0UsTUFBTSxrQkFBa0IsTUFBTSxtQkFBbUI7QUFDbkgsNkJBQTZCO0FBQzdCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLEVBQUU7QUFDcEM7QUFDQSxlQUFlO0FBQ2YsOENBQThDLEVBQUUsUUFBUTtBQUN4RCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUEsOENBQThDLFlBQVk7O0FBRTFEO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEQ7QUFDOUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9nZW5lcmF0ZVRleHR1cmVCYXRjaEJpdC5tanM/OWM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRleHR1cmVCYXRjaEJpdEdwdUNhY2hlID0ge307XG5mdW5jdGlvbiBnZW5lcmF0ZUJpbmRpbmdTcmMobWF4VGV4dHVyZXMpIHtcbiAgY29uc3Qgc3JjID0gW107XG4gIGlmIChtYXhUZXh0dXJlcyA9PT0gMSkge1xuICAgIHNyYy5wdXNoKFwiQGdyb3VwKDEpIEBiaW5kaW5nKDApIHZhciB0ZXh0dXJlU291cmNlMTogdGV4dHVyZV8yZDxmMzI+O1wiKTtcbiAgICBzcmMucHVzaChcIkBncm91cCgxKSBAYmluZGluZygxKSB2YXIgdGV4dHVyZVNhbXBsZXIxOiBzYW1wbGVyO1wiKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgYmluZGluZ0luZGV4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heFRleHR1cmVzOyBpKyspIHtcbiAgICAgIHNyYy5wdXNoKGBAZ3JvdXAoMSkgQGJpbmRpbmcoJHtiaW5kaW5nSW5kZXgrK30pIHZhciB0ZXh0dXJlU291cmNlJHtpICsgMX06IHRleHR1cmVfMmQ8ZjMyPjtgKTtcbiAgICAgIHNyYy5wdXNoKGBAZ3JvdXAoMSkgQGJpbmRpbmcoJHtiaW5kaW5nSW5kZXgrK30pIHZhciB0ZXh0dXJlU2FtcGxlciR7aSArIDF9OiBzYW1wbGVyO2ApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3JjLmpvaW4oXCJcXG5cIik7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVNhbXBsZVNyYyhtYXhUZXh0dXJlcykge1xuICBjb25zdCBzcmMgPSBbXTtcbiAgaWYgKG1heFRleHR1cmVzID09PSAxKSB7XG4gICAgc3JjLnB1c2goXCJvdXRDb2xvciA9IHRleHR1cmVTYW1wbGVHcmFkKHRleHR1cmVTb3VyY2UxLCB0ZXh0dXJlU2FtcGxlcjEsIHZVViwgdXZEeCwgdXZEeSk7XCIpO1xuICB9IGVsc2Uge1xuICAgIHNyYy5wdXNoKFwic3dpdGNoIHZUZXh0dXJlSWQge1wiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heFRleHR1cmVzOyBpKyspIHtcbiAgICAgIGlmIChpID09PSBtYXhUZXh0dXJlcyAtIDEpIHtcbiAgICAgICAgc3JjLnB1c2goYCAgZGVmYXVsdDp7YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcmMucHVzaChgICBjYXNlICR7aX06e2ApO1xuICAgICAgfVxuICAgICAgc3JjLnB1c2goYCAgICAgIG91dENvbG9yID0gdGV4dHVyZVNhbXBsZUdyYWQodGV4dHVyZVNvdXJjZSR7aSArIDF9LCB0ZXh0dXJlU2FtcGxlciR7aSArIDF9LCB2VVYsIHV2RHgsIHV2RHkpO2ApO1xuICAgICAgc3JjLnB1c2goYCAgICAgIGJyZWFrO31gKTtcbiAgICB9XG4gICAgc3JjLnB1c2goYH1gKTtcbiAgfVxuICByZXR1cm4gc3JjLmpvaW4oXCJcXG5cIik7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdChtYXhUZXh0dXJlcykge1xuICBpZiAoIXRleHR1cmVCYXRjaEJpdEdwdUNhY2hlW21heFRleHR1cmVzXSkge1xuICAgIHRleHR1cmVCYXRjaEJpdEdwdUNhY2hlW21heFRleHR1cmVzXSA9IHtcbiAgICAgIG5hbWU6IFwidGV4dHVyZS1iYXRjaC1iaXRcIixcbiAgICAgIHZlcnRleDoge1xuICAgICAgICBoZWFkZXI6IGBcbiAgICAgICAgICAgICAgICBAaW4gYVRleHR1cmVJZEFuZFJvdW5kOiB2ZWMyPHUzMj47XG4gICAgICAgICAgICAgICAgQG91dCBAaW50ZXJwb2xhdGUoZmxhdCkgdlRleHR1cmVJZCA6IHUzMjtcbiAgICAgICAgICAgIGAsXG4gICAgICAgIG1haW46IGBcbiAgICAgICAgICAgICAgICB2VGV4dHVyZUlkID0gYVRleHR1cmVJZEFuZFJvdW5kLnk7XG4gICAgICAgICAgICBgLFxuICAgICAgICBlbmQ6IGBcbiAgICAgICAgICAgICAgICBpZihhVGV4dHVyZUlkQW5kUm91bmQueCA9PSAxKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdlBvc2l0aW9uID0gdmVjNDxmMzI+KHJvdW5kUGl4ZWxzKHZQb3NpdGlvbi54eSwgZ2xvYmFsVW5pZm9ybXMudVJlc29sdXRpb24pLCB2UG9zaXRpb24uencpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgIH0sXG4gICAgICBmcmFnbWVudDoge1xuICAgICAgICBoZWFkZXI6IGBcbiAgICAgICAgICAgICAgICBAaW4gQGludGVycG9sYXRlKGZsYXQpIHZUZXh0dXJlSWQ6IHUzMjtcblxuICAgICAgICAgICAgICAgICR7Z2VuZXJhdGVCaW5kaW5nU3JjKG1heFRleHR1cmVzKX1cbiAgICAgICAgICAgIGAsXG4gICAgICAgIG1haW46IGBcbiAgICAgICAgICAgICAgICB2YXIgdXZEeCA9IGRwZHgodlVWKTtcbiAgICAgICAgICAgICAgICB2YXIgdXZEeSA9IGRwZHkodlVWKTtcblxuICAgICAgICAgICAgICAgICR7Z2VuZXJhdGVTYW1wbGVTcmMobWF4VGV4dHVyZXMpfVxuICAgICAgICAgICAgYFxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHRleHR1cmVCYXRjaEJpdEdwdUNhY2hlW21heFRleHR1cmVzXTtcbn1cbmNvbnN0IHRleHR1cmVCYXRjaEJpdEdsQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGdlbmVyYXRlU2FtcGxlR2xTcmMobWF4VGV4dHVyZXMpIHtcbiAgY29uc3Qgc3JjID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4VGV4dHVyZXM7IGkrKykge1xuICAgIGlmIChpID4gMCkge1xuICAgICAgc3JjLnB1c2goXCJlbHNlXCIpO1xuICAgIH1cbiAgICBpZiAoaSA8IG1heFRleHR1cmVzIC0gMSkge1xuICAgICAgc3JjLnB1c2goYGlmKHZUZXh0dXJlSWQgPCAke2l9LjUpYCk7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwie1wiKTtcbiAgICBzcmMucHVzaChgXHRvdXRDb2xvciA9IHRleHR1cmUodVRleHR1cmVzWyR7aX1dLCB2VVYpO2ApO1xuICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgfVxuICByZXR1cm4gc3JjLmpvaW4oXCJcXG5cIik7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdEdsKG1heFRleHR1cmVzKSB7XG4gIGlmICghdGV4dHVyZUJhdGNoQml0R2xDYWNoZVttYXhUZXh0dXJlc10pIHtcbiAgICB0ZXh0dXJlQmF0Y2hCaXRHbENhY2hlW21heFRleHR1cmVzXSA9IHtcbiAgICAgIG5hbWU6IFwidGV4dHVyZS1iYXRjaC1iaXRcIixcbiAgICAgIHZlcnRleDoge1xuICAgICAgICBoZWFkZXI6IGBcbiAgICAgICAgICAgICAgICBpbiB2ZWMyIGFUZXh0dXJlSWRBbmRSb3VuZDtcbiAgICAgICAgICAgICAgICBvdXQgZmxvYXQgdlRleHR1cmVJZDtcblxuICAgICAgICAgICAgYCxcbiAgICAgICAgbWFpbjogYFxuICAgICAgICAgICAgICAgIHZUZXh0dXJlSWQgPSBhVGV4dHVyZUlkQW5kUm91bmQueTtcbiAgICAgICAgICAgIGAsXG4gICAgICAgIGVuZDogYFxuICAgICAgICAgICAgICAgIGlmKGFUZXh0dXJlSWRBbmRSb3VuZC54ID09IDEuKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24ueHkgPSByb3VuZFBpeGVscyhnbF9Qb3NpdGlvbi54eSwgdVJlc29sdXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgIH0sXG4gICAgICBmcmFnbWVudDoge1xuICAgICAgICBoZWFkZXI6IGBcbiAgICAgICAgICAgICAgICBpbiBmbG9hdCB2VGV4dHVyZUlkO1xuXG4gICAgICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmVzWyR7bWF4VGV4dHVyZXN9XTtcblxuICAgICAgICAgICAgYCxcbiAgICAgICAgbWFpbjogYFxuXG4gICAgICAgICAgICAgICAgJHtnZW5lcmF0ZVNhbXBsZUdsU3JjKG1heFRleHR1cmVzKX1cbiAgICAgICAgICAgIGBcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiB0ZXh0dXJlQmF0Y2hCaXRHbENhY2hlW21heFRleHR1cmVzXTtcbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXQsIGdlbmVyYXRlVGV4dHVyZUJhdGNoQml0R2wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlVGV4dHVyZUJhdGNoQml0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6600\n')},8070:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $g: () => (/* binding */ localUniformBitGl),\n/* harmony export */   Kt: () => (/* binding */ localUniformBitGroup2),\n/* harmony export */   XH: () => (/* binding */ localUniformBit)\n/* harmony export */ });\n\nconst localUniformBit = {\n  name: "local-uniform-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace("group(1)", "group(2)")\n  }\n};\nconst localUniformBitGl = {\n  name: "local-uniform-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=localUniformBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA3MC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxRTtBQUNyRSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1iaWxsYm9hcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybUJpdC5tanM/MTVlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGxvY2FsVW5pZm9ybUJpdCA9IHtcbiAgbmFtZTogXCJsb2NhbC11bmlmb3JtLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcblxuICAgICAgICAgICAgc3RydWN0IExvY2FsVW5pZm9ybXMge1xuICAgICAgICAgICAgICAgIHVUcmFuc2Zvcm1NYXRyaXg6bWF0M3gzPGYzMj4sXG4gICAgICAgICAgICAgICAgdUNvbG9yOnZlYzQ8ZjMyPixcbiAgICAgICAgICAgICAgICB1Um91bmQ6ZjMyLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBAZ3JvdXAoMSkgQGJpbmRpbmcoMCkgdmFyPHVuaWZvcm0+IGxvY2FsVW5pZm9ybXMgOiBMb2NhbFVuaWZvcm1zO1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICB2Q29sb3IgKj0gbG9jYWxVbmlmb3Jtcy51Q29sb3I7XG4gICAgICAgICAgICBtb2RlbE1hdHJpeCAqPSBsb2NhbFVuaWZvcm1zLnVUcmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgIGBcbiAgICApLFxuICAgIGVuZDogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgaWYobG9jYWxVbmlmb3Jtcy51Um91bmQgPT0gMSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2UG9zaXRpb24gPSB2ZWM0KHJvdW5kUGl4ZWxzKHZQb3NpdGlvbi54eSwgZ2xvYmFsVW5pZm9ybXMudVJlc29sdXRpb24pLCB2UG9zaXRpb24uencpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuY29uc3QgbG9jYWxVbmlmb3JtQml0R3JvdXAyID0ge1xuICAuLi5sb2NhbFVuaWZvcm1CaXQsXG4gIHZlcnRleDoge1xuICAgIC4uLmxvY2FsVW5pZm9ybUJpdC52ZXJ0ZXgsXG4gICAgLy8gcmVwbGFjZSB0aGUgZ3JvdXAhXG4gICAgaGVhZGVyOiBsb2NhbFVuaWZvcm1CaXQudmVydGV4LmhlYWRlci5yZXBsYWNlKFwiZ3JvdXAoMSlcIiwgXCJncm91cCgyKVwiKVxuICB9XG59O1xuY29uc3QgbG9jYWxVbmlmb3JtQml0R2wgPSB7XG4gIG5hbWU6IFwibG9jYWwtdW5pZm9ybS1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG5cbiAgICAgICAgICAgIHVuaWZvcm0gbWF0MyB1VHJhbnNmb3JtTWF0cml4O1xuICAgICAgICAgICAgdW5pZm9ybSB2ZWM0IHVDb2xvcjtcbiAgICAgICAgICAgIHVuaWZvcm0gZmxvYXQgdVJvdW5kO1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICB2Q29sb3IgKj0gdUNvbG9yO1xuICAgICAgICAgICAgbW9kZWxNYXRyaXggPSB1VHJhbnNmb3JtTWF0cml4O1xuICAgICAgICBgXG4gICAgKSxcbiAgICBlbmQ6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIGlmKHVSb3VuZCA9PSAxLilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbi54eSA9IHJvdW5kUGl4ZWxzKGdsX1Bvc2l0aW9uLnh5LCB1UmVzb2x1dGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5cbmV4cG9ydCB7IGxvY2FsVW5pZm9ybUJpdCwgbG9jYWxVbmlmb3JtQml0R2wsIGxvY2FsVW5pZm9ybUJpdEdyb3VwMiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxVbmlmb3JtQml0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8070\n')},9637:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X: () => (/* binding */ roundPixelsBitGl),\n/* harmony export */   j: () => (/* binding */ roundPixelsBit)\n/* harmony export */ });\n\nconst roundPixelsBit = {\n  name: "round-pixels-bit",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32> \n            {\n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\nconst roundPixelsBitGl = {\n  name: "round-pixels-bit",\n  vertex: {\n    header: (\n      /* glsl */\n      `   \n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {       \n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        `\n    )\n  }\n};\n\n\n//# sourceMappingURL=roundPixelsBit.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYzNy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9yb3VuZFBpeGVsc0JpdC5tanM/NDU1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHJvdW5kUGl4ZWxzQml0ID0ge1xuICBuYW1lOiBcInJvdW5kLXBpeGVscy1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBmbiByb3VuZFBpeGVscyhwb3NpdGlvbjogdmVjMjxmMzI+LCB0YXJnZXRTaXplOiB2ZWMyPGYzMj4pIC0+IHZlYzI8ZjMyPiBcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZsb29yKCgocG9zaXRpb24gKiAwLjUgKyAwLjUpICogdGFyZ2V0U2l6ZSkgKyAwLjUpIC8gdGFyZ2V0U2l6ZSkgKiAyLjAgLSAxLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5jb25zdCByb3VuZFBpeGVsc0JpdEdsID0ge1xuICBuYW1lOiBcInJvdW5kLXBpeGVscy1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgICAgXG4gICAgICAgICAgICB2ZWMyIHJvdW5kUGl4ZWxzKHZlYzIgcG9zaXRpb24sIHZlYzIgdGFyZ2V0U2l6ZSlcbiAgICAgICAgICAgIHsgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIChmbG9vcigoKHBvc2l0aW9uICogMC41ICsgMC41KSAqIHRhcmdldFNpemUpICsgMC41KSAvIHRhcmdldFNpemUpICogMi4wIC0gMS4wO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyByb3VuZFBpeGVsc0JpdCwgcm91bmRQaXhlbHNCaXRHbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91bmRQaXhlbHNCaXQubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9637\n')},749:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  J: () => (/* binding */ GlProgram)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs\nvar createIdFromString = __webpack_require__(8460);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getTestContext.mjs\nvar getTestContext = __webpack_require__(8407);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.mjs\n\n\n"use strict";\nlet maxFragmentPrecision;\nfunction getMaxFragmentPrecision() {\n  if (!maxFragmentPrecision) {\n    maxFragmentPrecision = "mediump";\n    const gl = (0,getTestContext/* getTestContext */.K)();\n    if (gl) {\n      if (gl.getShaderPrecisionFormat) {\n        const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n        maxFragmentPrecision = shaderFragment.precision ? "highp" : "mediump";\n      }\n    }\n  }\n  return maxFragmentPrecision;\n}\n\n\n//# sourceMappingURL=getMaxFragmentPrecision.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.mjs\n\nfunction addProgramDefines(src, isES300, isFragment) {\n  if (isES300)\n    return src;\n  if (isFragment) {\n    src = src.replace("out vec4 finalColor;", "");\n    return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${src}\n        `;\n  }\n  return `\n        \n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${src}\n        `;\n}\n\n\n//# sourceMappingURL=addProgramDefines.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.mjs\n\nfunction ensurePrecision(src, options, isFragment) {\n  const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n  if (src.substring(0, 9) !== "precision") {\n    let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n    if (precision === "highp" && maxSupportedPrecision !== "highp") {\n      precision = "mediump";\n    }\n    return `precision ${precision} float;\n${src}`;\n  } else if (maxSupportedPrecision !== "highp" && src.substring(0, 15) === "precision highp") {\n    return src.replace("precision highp", "precision mediump");\n  }\n  return src;\n}\n\n\n//# sourceMappingURL=ensurePrecision.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/insertVersion.mjs\n\nfunction insertVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return `#version 300 es\n${src}`;\n}\n\n\n//# sourceMappingURL=insertVersion.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/setProgramName.mjs\n\nconst fragmentNameCache = {};\nconst VertexNameCache = {};\nfunction setProgramName(src, { name = `pixi-program` }, isFragment = true) {\n  name = name.replace(/\\s+/g, "-");\n  name += isFragment ? "-fragment" : "-vertex";\n  const nameCache = isFragment ? fragmentNameCache : VertexNameCache;\n  if (nameCache[name]) {\n    nameCache[name]++;\n    name += `-${nameCache[name]}`;\n  } else {\n    nameCache[name] = 1;\n  }\n  if (src.indexOf("#define SHADER_NAME") !== -1)\n    return src;\n  const shaderName = `#define SHADER_NAME ${name}`;\n  return `${shaderName}\n${src}`;\n}\n\n\n//# sourceMappingURL=setProgramName.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/stripVersion.mjs\n\nfunction stripVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return src.replace("#version 300 es", "");\n}\n\n\n//# sourceMappingURL=stripVersion.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs\n\n\n\n\n\n\n\n\n"use strict";\nconst processes = {\n  // strips any version headers..\n  stripVersion: stripVersion,\n  // adds precision string if not already present\n  ensurePrecision: ensurePrecision,\n  // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n  addProgramDefines: addProgramDefines,\n  // add the program name to the shader\n  setProgramName: setProgramName,\n  // add the version string to the shader header\n  insertVersion: insertVersion\n};\nconst programCache = /* @__PURE__ */ Object.create(null);\nconst _GlProgram = class _GlProgram {\n  /**\n   * Creates a shiny new GlProgram. Used by WebGL renderer.\n   * @param options - The options for the program.\n   */\n  constructor(options) {\n    options = { ..._GlProgram.defaultOptions, ...options };\n    const isES300 = options.fragment.indexOf("#version 300 es") !== -1;\n    const preprocessorOptions = {\n      stripVersion: isES300,\n      ensurePrecision: {\n        requestedFragmentPrecision: options.preferredFragmentPrecision,\n        requestedVertexPrecision: options.preferredVertexPrecision,\n        maxSupportedVertexPrecision: "highp",\n        maxSupportedFragmentPrecision: getMaxFragmentPrecision()\n      },\n      setProgramName: {\n        name: options.name\n      },\n      addProgramDefines: isES300,\n      insertVersion: isES300\n    };\n    let fragment = options.fragment;\n    let vertex = options.vertex;\n    Object.keys(processes).forEach((processKey) => {\n      const processOptions = preprocessorOptions[processKey];\n      fragment = processes[processKey](fragment, processOptions, true);\n      vertex = processes[processKey](vertex, processOptions, false);\n    });\n    this.fragment = fragment;\n    this.vertex = vertex;\n    this._key = (0,createIdFromString/* createIdFromString */.Z)(`${this.vertex}:${this.fragment}`, "gl-program");\n  }\n  /** destroys the program */\n  destroy() {\n    this.fragment = null;\n    this.vertex = null;\n    this._attributeData = null;\n    this._uniformData = null;\n    this._uniformBlockData = null;\n    this.transformFeedbackVaryings = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex}:${options.fragment}`;\n    if (!programCache[key]) {\n      programCache[key] = new _GlProgram(options);\n    }\n    return programCache[key];\n  }\n};\n/** The default options used by the program. */\n_GlProgram.defaultOptions = {\n  preferredVertexPrecision: "highp",\n  preferredFragmentPrecision: "mediump"\n};\nlet GlProgram = _GlProgram;\n\n\n//# sourceMappingURL=GlProgram.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///749\n')},1982:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  O: () => (/* binding */ GpuProgram)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs\nvar createIdFromString = __webpack_require__(8460);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs\nvar getAttributeInfoFromFormat = __webpack_require__(9824);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.mjs\n\n\n"use strict";\nconst WGSL_TO_VERTEX_TYPES = {\n  f32: "float32",\n  "vec2<f32>": "float32x2",\n  "vec3<f32>": "float32x3",\n  "vec4<f32>": "float32x4",\n  vec2f: "float32x2",\n  vec3f: "float32x3",\n  vec4f: "float32x4",\n  i32: "sint32",\n  "vec2<i32>": "sint32x2",\n  "vec3<i32>": "sint32x3",\n  "vec4<i32>": "sint32x4",\n  u32: "uint32",\n  "vec2<u32>": "uint32x2",\n  "vec3<u32>": "uint32x3",\n  "vec4<u32>": "uint32x4",\n  bool: "uint32",\n  "vec2<bool>": "uint32x2",\n  "vec3<bool>": "uint32x3",\n  "vec4<bool>": "uint32x4"\n};\nfunction extractAttributesFromGpuProgram({ source, entryPoint }) {\n  const results = {};\n  const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n  if (mainVertStart !== -1) {\n    const arrowFunctionStart = source.indexOf("->", mainVertStart);\n    if (arrowFunctionStart !== -1) {\n      const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n      const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n      let match;\n      while ((match = inputsRegex.exec(functionArgsSubstring)) !== null) {\n        const format = WGSL_TO_VERTEX_TYPES[match[3]] ?? "float32";\n        results[match[2]] = {\n          location: parseInt(match[1], 10),\n          format,\n          stride: (0,getAttributeInfoFromFormat/* getAttributeInfoFromFormat */.v)(format).stride,\n          offset: 0,\n          instance: false,\n          start: 0\n        };\n      }\n    }\n  }\n  return results;\n}\n\n\n//# sourceMappingURL=extractAttributesFromGpuProgram.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractStructAndGroups.mjs\n\nfunction extractStructAndGroups(wgsl) {\n  const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n  const groupPattern = /@group\\((\\d+)\\)/;\n  const bindingPattern = /@binding\\((\\d+)\\)/;\n  const namePattern = /var(<[^>]+>)? (\\w+)/;\n  const typePattern = /:\\s*(\\w+)/;\n  const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n  const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n  const structName = /struct\\s+(\\w+)/;\n  const groups = wgsl.match(linePattern)?.map((item) => ({\n    group: parseInt(item.match(groupPattern)[1], 10),\n    binding: parseInt(item.match(bindingPattern)[1], 10),\n    name: item.match(namePattern)[2],\n    isUniform: item.match(namePattern)[1] === "<uniform>",\n    type: item.match(typePattern)[1]\n  }));\n  if (!groups) {\n    return {\n      groups: [],\n      structs: []\n    };\n  }\n  const structs = wgsl.match(structPattern)?.map((struct) => {\n    const name = struct.match(structName)[1];\n    const members = struct.match(structMemberPattern).reduce((acc, member) => {\n      const [name2, type] = member.split(":");\n      acc[name2.trim()] = type.trim();\n      return acc;\n    }, {});\n    if (!members) {\n      return null;\n    }\n    return { name, members };\n  }).filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n  return {\n    groups,\n    structs\n  };\n}\n\n\n//# sourceMappingURL=extractStructAndGroups.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/const.mjs\n\nvar ShaderStage = /* @__PURE__ */ ((ShaderStage2) => {\n  ShaderStage2[ShaderStage2["VERTEX"] = 1] = "VERTEX";\n  ShaderStage2[ShaderStage2["FRAGMENT"] = 2] = "FRAGMENT";\n  ShaderStage2[ShaderStage2["COMPUTE"] = 4] = "COMPUTE";\n  return ShaderStage2;\n})(ShaderStage || {});\n\n\n//# sourceMappingURL=const.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.mjs\n\n\n"use strict";\nfunction generateGpuLayoutGroups({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = [];\n    }\n    if (group.isUniform) {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n        buffer: {\n          type: "uniform"\n        }\n      });\n    } else if (group.type === "sampler") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        sampler: {\n          type: "filtering"\n        }\n      });\n    } else if (group.type === "texture_2d") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        texture: {\n          sampleType: "float",\n          viewDimension: "2d",\n          multisampled: false\n        }\n      });\n    }\n  }\n  return layout;\n}\n\n\n//# sourceMappingURL=generateGpuLayoutGroups.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateLayoutHash.mjs\n\nfunction generateLayoutHash({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = {};\n    }\n    layout[group.group][group.name] = group.binding;\n  }\n  return layout;\n}\n\n\n//# sourceMappingURL=generateLayoutHash.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.mjs\n\nfunction removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups) {\n  const structNameSet = /* @__PURE__ */ new Set();\n  const dupeGroupKeySet = /* @__PURE__ */ new Set();\n  const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs].filter((struct) => {\n    if (structNameSet.has(struct.name)) {\n      return false;\n    }\n    structNameSet.add(struct.name);\n    return true;\n  });\n  const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups].filter((group) => {\n    const key = `${group.name}-${group.binding}`;\n    if (dupeGroupKeySet.has(key)) {\n      return false;\n    }\n    dupeGroupKeySet.add(key);\n    return true;\n  });\n  return { structs, groups };\n}\n\n\n//# sourceMappingURL=removeStructAndGroupDuplicates.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs\n\n\n\n\n\n\n\n"use strict";\nconst programCache = /* @__PURE__ */ Object.create(null);\nclass GpuProgram {\n  /**\n   * Create a new GpuProgram\n   * @param options - The options for the gpu program\n   */\n  constructor(options) {\n    /**\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    const { fragment, vertex, layout, gpuLayout, name } = options;\n    this.name = name;\n    this.fragment = fragment;\n    this.vertex = vertex;\n    if (fragment.source === vertex.source) {\n      const structsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = structsAndGroups;\n    } else {\n      const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n      const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n    }\n    this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n    this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n    this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== void 0);\n    this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== void 0);\n    this._generateProgramKey();\n  }\n  // TODO maker this pure\n  _generateProgramKey() {\n    const { vertex, fragment } = this;\n    const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n    this._layoutKey = (0,createIdFromString/* createIdFromString */.Z)(bigKey, "program");\n  }\n  get attributeData() {\n    this._attributeData ?? (this._attributeData = extractAttributesFromGpuProgram(this.vertex));\n    return this._attributeData;\n  }\n  /** destroys the program */\n  destroy() {\n    this.gpuLayout = null;\n    this.layout = null;\n    this.structsAndGroups = null;\n    this.fragment = null;\n    this.vertex = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n    if (!programCache[key]) {\n      programCache[key] = new GpuProgram(options);\n    }\n    return programCache[key];\n  }\n}\n\n\n//# sourceMappingURL=GpuProgram.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1982\n')},9824:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   v: () => (/* binding */ getAttributeInfoFromFormat)\n/* harmony export */ });\n\nconst attributeFormatData = {\n  uint8x2: { size: 2, stride: 2, normalised: false },\n  uint8x4: { size: 4, stride: 4, normalised: false },\n  sint8x2: { size: 2, stride: 2, normalised: false },\n  sint8x4: { size: 4, stride: 4, normalised: false },\n  unorm8x2: { size: 2, stride: 2, normalised: true },\n  unorm8x4: { size: 4, stride: 4, normalised: true },\n  snorm8x2: { size: 2, stride: 2, normalised: true },\n  snorm8x4: { size: 4, stride: 4, normalised: true },\n  uint16x2: { size: 2, stride: 4, normalised: false },\n  uint16x4: { size: 4, stride: 8, normalised: false },\n  sint16x2: { size: 2, stride: 4, normalised: false },\n  sint16x4: { size: 4, stride: 8, normalised: false },\n  unorm16x2: { size: 2, stride: 4, normalised: true },\n  unorm16x4: { size: 4, stride: 8, normalised: true },\n  snorm16x2: { size: 2, stride: 4, normalised: true },\n  snorm16x4: { size: 4, stride: 8, normalised: true },\n  float16x2: { size: 2, stride: 4, normalised: false },\n  float16x4: { size: 4, stride: 8, normalised: false },\n  float32: { size: 1, stride: 4, normalised: false },\n  float32x2: { size: 2, stride: 8, normalised: false },\n  float32x3: { size: 3, stride: 12, normalised: false },\n  float32x4: { size: 4, stride: 16, normalised: false },\n  uint32: { size: 1, stride: 4, normalised: false },\n  uint32x2: { size: 2, stride: 8, normalised: false },\n  uint32x3: { size: 3, stride: 12, normalised: false },\n  uint32x4: { size: 4, stride: 16, normalised: false },\n  sint32: { size: 1, stride: 4, normalised: false },\n  sint32x2: { size: 2, stride: 8, normalised: false },\n  sint32x3: { size: 3, stride: 12, normalised: false },\n  sint32x4: { size: 4, stride: 16, normalised: false }\n};\nfunction getAttributeInfoFromFormat(format) {\n  return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n\n\n//# sourceMappingURL=getAttributeInfoFromFormat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTgyNC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0EsYUFBYSx1Q0FBdUM7QUFDcEQsYUFBYSx1Q0FBdUM7QUFDcEQsYUFBYSx1Q0FBdUM7QUFDcEQsYUFBYSx1Q0FBdUM7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyxzQ0FBc0M7QUFDcEQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx1Q0FBdUM7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSxzQ0FBc0M7QUFDckQsZUFBZSx1Q0FBdUM7QUFDdEQsZUFBZSx1Q0FBdUM7QUFDdEQsYUFBYSx1Q0FBdUM7QUFDcEQsZUFBZSx1Q0FBdUM7QUFDdEQsZUFBZSx3Q0FBd0M7QUFDdkQsZUFBZSx3Q0FBd0M7QUFDdkQsWUFBWSx1Q0FBdUM7QUFDbkQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx3Q0FBd0M7QUFDdEQsY0FBYyx3Q0FBd0M7QUFDdEQsWUFBWSx1Q0FBdUM7QUFDbkQsY0FBYyx1Q0FBdUM7QUFDckQsY0FBYyx3Q0FBd0M7QUFDdEQsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1iaWxsYm9hcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvZ2VvbWV0cnkvdXRpbHMvZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQubWpzPzAwMjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBhdHRyaWJ1dGVGb3JtYXREYXRhID0ge1xuICB1aW50OHgyOiB7IHNpemU6IDIsIHN0cmlkZTogMiwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgdWludDh4NDogeyBzaXplOiA0LCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHNpbnQ4eDI6IHsgc2l6ZTogMiwgc3RyaWRlOiAyLCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBzaW50OHg0OiB7IHNpemU6IDQsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgdW5vcm04eDI6IHsgc2l6ZTogMiwgc3RyaWRlOiAyLCBub3JtYWxpc2VkOiB0cnVlIH0sXG4gIHVub3JtOHg0OiB7IHNpemU6IDQsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogdHJ1ZSB9LFxuICBzbm9ybTh4MjogeyBzaXplOiAyLCBzdHJpZGU6IDIsIG5vcm1hbGlzZWQ6IHRydWUgfSxcbiAgc25vcm04eDQ6IHsgc2l6ZTogNCwgc3RyaWRlOiA0LCBub3JtYWxpc2VkOiB0cnVlIH0sXG4gIHVpbnQxNngyOiB7IHNpemU6IDIsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgdWludDE2eDQ6IHsgc2l6ZTogNCwgc3RyaWRlOiA4LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBzaW50MTZ4MjogeyBzaXplOiAyLCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHNpbnQxNng0OiB7IHNpemU6IDQsIHN0cmlkZTogOCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgdW5vcm0xNngyOiB7IHNpemU6IDIsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogdHJ1ZSB9LFxuICB1bm9ybTE2eDQ6IHsgc2l6ZTogNCwgc3RyaWRlOiA4LCBub3JtYWxpc2VkOiB0cnVlIH0sXG4gIHNub3JtMTZ4MjogeyBzaXplOiAyLCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IHRydWUgfSxcbiAgc25vcm0xNng0OiB7IHNpemU6IDQsIHN0cmlkZTogOCwgbm9ybWFsaXNlZDogdHJ1ZSB9LFxuICBmbG9hdDE2eDI6IHsgc2l6ZTogMiwgc3RyaWRlOiA0LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBmbG9hdDE2eDQ6IHsgc2l6ZTogNCwgc3RyaWRlOiA4LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICBmbG9hdDMyOiB7IHNpemU6IDEsIHN0cmlkZTogNCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgZmxvYXQzMngyOiB7IHNpemU6IDIsIHN0cmlkZTogOCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgZmxvYXQzMngzOiB7IHNpemU6IDMsIHN0cmlkZTogMTIsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIGZsb2F0MzJ4NDogeyBzaXplOiA0LCBzdHJpZGU6IDE2LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICB1aW50MzI6IHsgc2l6ZTogMSwgc3RyaWRlOiA0LCBub3JtYWxpc2VkOiBmYWxzZSB9LFxuICB1aW50MzJ4MjogeyBzaXplOiAyLCBzdHJpZGU6IDgsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHVpbnQzMngzOiB7IHNpemU6IDMsIHN0cmlkZTogMTIsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHVpbnQzMng0OiB7IHNpemU6IDQsIHN0cmlkZTogMTYsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHNpbnQzMjogeyBzaXplOiAxLCBzdHJpZGU6IDQsIG5vcm1hbGlzZWQ6IGZhbHNlIH0sXG4gIHNpbnQzMngyOiB7IHNpemU6IDIsIHN0cmlkZTogOCwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgc2ludDMyeDM6IHsgc2l6ZTogMywgc3RyaWRlOiAxMiwgbm9ybWFsaXNlZDogZmFsc2UgfSxcbiAgc2ludDMyeDQ6IHsgc2l6ZTogNCwgc3RyaWRlOiAxNiwgbm9ybWFsaXNlZDogZmFsc2UgfVxufTtcbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0KGZvcm1hdCkge1xuICByZXR1cm4gYXR0cmlidXRlRm9ybWF0RGF0YVtmb3JtYXRdID8/IGF0dHJpYnV0ZUZvcm1hdERhdGEuZmxvYXQzMjtcbn1cblxuZXhwb3J0IHsgZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9824\n")},2267:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ Shader)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1580);\n/* harmony import */ var _gl_shader_GlProgram_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(749);\n/* harmony import */ var _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9818);\n/* harmony import */ var _gpu_shader_GpuProgram_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1982);\n/* harmony import */ var _types_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5765);\n/* harmony import */ var _UniformGroup_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4537);\n\n\n\n\n\n\n\n"use strict";\nclass Shader extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z {\n  constructor(options) {\n    super();\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    this._uniformBindMap = /* @__PURE__ */ Object.create(null);\n    this._ownedBindGroups = [];\n    let {\n      gpuProgram,\n      glProgram,\n      groups,\n      resources,\n      compatibleRenderers,\n      groupMap\n    } = options;\n    this.gpuProgram = gpuProgram;\n    this.glProgram = glProgram;\n    if (compatibleRenderers === void 0) {\n      compatibleRenderers = 0;\n      if (gpuProgram)\n        compatibleRenderers |= _types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RendererType */ .g.WEBGPU;\n      if (glProgram)\n        compatibleRenderers |= _types_mjs__WEBPACK_IMPORTED_MODULE_1__/* .RendererType */ .g.WEBGL;\n    }\n    this.compatibleRenderers = compatibleRenderers;\n    const nameHash = {};\n    if (!resources && !groups) {\n      resources = {};\n    }\n    if (resources && groups) {\n      throw new Error("[Shader] Cannot have both resources and groups");\n    } else if (!gpuProgram && groups && !groupMap) {\n      throw new Error("[Shader] No group map or WebGPU shader provided - consider using resources instead.");\n    } else if (!gpuProgram && groups && groupMap) {\n      for (const i in groupMap) {\n        for (const j in groupMap[i]) {\n          const uniformName = groupMap[i][j];\n          nameHash[uniformName] = {\n            group: i,\n            binding: j,\n            name: uniformName\n          };\n        }\n      }\n    } else if (gpuProgram && groups && !groupMap) {\n      const groupData = gpuProgram.structsAndGroups.groups;\n      groupMap = {};\n      groupData.forEach((data) => {\n        groupMap[data.group] = groupMap[data.group] || {};\n        groupMap[data.group][data.binding] = data.name;\n        nameHash[data.name] = data;\n      });\n    } else if (resources) {\n      groups = {};\n      groupMap = {};\n      if (gpuProgram) {\n        const groupData = gpuProgram.structsAndGroups.groups;\n        groupData.forEach((data) => {\n          groupMap[data.group] = groupMap[data.group] || {};\n          groupMap[data.group][data.binding] = data.name;\n          nameHash[data.name] = data;\n        });\n      }\n      let bindTick = 0;\n      for (const i in resources) {\n        if (nameHash[i])\n          continue;\n        if (!groups[99]) {\n          groups[99] = new _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BindGroup */ .v();\n          this._ownedBindGroups.push(groups[99]);\n        }\n        nameHash[i] = { group: 99, binding: bindTick, name: i };\n        groupMap[99] = groupMap[99] || {};\n        groupMap[99][bindTick] = i;\n        bindTick++;\n      }\n      for (const i in resources) {\n        const name = i;\n        let value = resources[i];\n        if (!value.source && !value._resourceType) {\n          value = new _UniformGroup_mjs__WEBPACK_IMPORTED_MODULE_3__/* .UniformGroup */ .o(value);\n        }\n        const data = nameHash[name];\n        if (data) {\n          if (!groups[data.group]) {\n            groups[data.group] = new _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BindGroup */ .v();\n            this._ownedBindGroups.push(groups[data.group]);\n          }\n          groups[data.group].setResource(value, data.binding);\n        }\n      }\n    }\n    this.groups = groups;\n    this._uniformBindMap = groupMap;\n    this.resources = this._buildResourceAccessor(groups, nameHash);\n  }\n  /**\n   * Sometimes a resource group will be provided later (for example global uniforms)\n   * In such cases, this method can be used to let the shader know about the group.\n   * @param name - the name of the resource group\n   * @param groupIndex - the index of the group (should match the webGPU shader group location)\n   * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n   */\n  addResource(name, groupIndex, bindIndex) {\n    var _a, _b;\n    (_a = this._uniformBindMap)[groupIndex] || (_a[groupIndex] = {});\n    (_b = this._uniformBindMap[groupIndex])[bindIndex] || (_b[bindIndex] = name);\n    if (!this.groups[groupIndex]) {\n      this.groups[groupIndex] = new _gpu_shader_BindGroup_mjs__WEBPACK_IMPORTED_MODULE_2__/* .BindGroup */ .v();\n      this._ownedBindGroups.push(this.groups[groupIndex]);\n    }\n  }\n  _buildResourceAccessor(groups, nameHash) {\n    const uniformsOut = {};\n    for (const i in nameHash) {\n      const data = nameHash[i];\n      Object.defineProperty(uniformsOut, data.name, {\n        get() {\n          return groups[data.group].getResource(data.binding);\n        },\n        set(value) {\n          groups[data.group].setResource(value, data.binding);\n        }\n      });\n    }\n    return uniformsOut;\n  }\n  /**\n   * Use to destroy the shader when its not longer needed.\n   * It will destroy the resources and remove listeners.\n   * @param destroyPrograms - if the programs should be destroyed as well.\n   * Make sure its not being used by other shaders!\n   */\n  destroy(destroyPrograms = false) {\n    this.emit("destroy", this);\n    if (destroyPrograms) {\n      this.gpuProgram?.destroy();\n      this.glProgram?.destroy();\n    }\n    this.gpuProgram = null;\n    this.glProgram = null;\n    this.removeAllListeners();\n    this._uniformBindMap = null;\n    this._ownedBindGroups.forEach((bindGroup) => {\n      bindGroup.destroy();\n    });\n    this._ownedBindGroups = null;\n    this.resources = null;\n    this.groups = null;\n  }\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = _gpu_shader_GpuProgram_mjs__WEBPACK_IMPORTED_MODULE_4__/* .GpuProgram */ .O.from(gpu);\n    }\n    if (gl) {\n      glProgram = _gl_shader_GlProgram_mjs__WEBPACK_IMPORTED_MODULE_5__/* .GlProgram */ .J.from(gl);\n    }\n    return new Shader({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n}\n\n\n//# sourceMappingURL=Shader.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2267\n')},4537:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  o: () => (/* binding */ UniformGroup)\n});\n\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/utils/data/uid.mjs\nvar uid = __webpack_require__(6258);\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs\nvar createIdFromString = __webpack_require__(8460);\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/types.mjs\n\nconst UNIFORM_TYPES_VALUES = [\n  "f32",\n  "i32",\n  "vec2<f32>",\n  "vec3<f32>",\n  "vec4<f32>",\n  "mat2x2<f32>",\n  "mat3x3<f32>",\n  "mat4x4<f32>",\n  "mat3x2<f32>",\n  "mat4x2<f32>",\n  "mat2x3<f32>",\n  "mat4x3<f32>",\n  "mat2x4<f32>",\n  "mat3x4<f32>"\n];\nconst UNIFORM_TYPES_MAP = UNIFORM_TYPES_VALUES.reduce((acc, type) => {\n  acc[type] = true;\n  return acc;\n}, {});\n\n\n//# sourceMappingURL=types.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/getDefaultUniformValue.mjs\n\nfunction getDefaultUniformValue(type, size) {\n  switch (type) {\n    case "f32":\n      return 0;\n    case "vec2<f32>":\n      return new Float32Array(2 * size);\n    case "vec3<f32>":\n      return new Float32Array(3 * size);\n    case "vec4<f32>":\n      return new Float32Array(4 * size);\n    case "mat2x2<f32>":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        1\n      ]);\n    case "mat3x3<f32>":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        1\n      ]);\n    case "mat4x4<f32>":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n      ]);\n  }\n  return null;\n}\n\n\n//# sourceMappingURL=getDefaultUniformValue.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs\n\n\n\n\n\n"use strict";\nconst _UniformGroup = class _UniformGroup {\n  /**\n   * Create a new Uniform group\n   * @param uniformStructures - The structures of the uniform group\n   * @param options - The optional parameters of this uniform group\n   */\n  constructor(uniformStructures, options) {\n    /** used internally to know if a uniform group was used in the last render pass */\n    this._touched = 0;\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = (0,uid/* uid */.h)("uniform");\n    /** a resource type, used to identify how to handle it when its in a bind group / shader resource */\n    this._resourceType = "uniformGroup";\n    /** the resource id used internally by the renderer to build bind group keys */\n    this._resourceId = (0,uid/* uid */.h)("resource");\n    /** used ito identify if this is a uniform group */\n    this.isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     * @ignore\n     */\n    this._dirtyId = 0;\n    // implementing the interface - UniformGroup are not destroyed\n    this.destroyed = false;\n    options = { ..._UniformGroup.defaultOptions, ...options };\n    this.uniformStructures = uniformStructures;\n    const uniforms = {};\n    for (const i in uniformStructures) {\n      const uniformData = uniformStructures[i];\n      uniformData.name = i;\n      uniformData.size = uniformData.size ?? 1;\n      if (!UNIFORM_TYPES_MAP[uniformData.type]) {\n        throw new Error(`Uniform type ${uniformData.type} is not supported. Supported uniform types are: ${UNIFORM_TYPES_VALUES.join(", ")}`);\n      }\n      uniformData.value ?? (uniformData.value = getDefaultUniformValue(uniformData.type, uniformData.size));\n      uniforms[i] = uniformData.value;\n    }\n    this.uniforms = uniforms;\n    this._dirtyId = 1;\n    this.ubo = options.ubo;\n    this.isStatic = options.isStatic;\n    this._signature = (0,createIdFromString/* createIdFromString */.Z)(Object.keys(uniforms).map(\n      (i) => `${i}-${uniformStructures[i].type}`\n    ).join("-"), "uniform-group");\n  }\n  /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n  update() {\n    this._dirtyId++;\n  }\n};\n/** The default options used by the uniform group. */\n_UniformGroup.defaultOptions = {\n  /** if true the UniformGroup is handled as an Uniform buffer object. */\n  ubo: false,\n  /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n  isStatic: false\n};\nlet UniformGroup = _UniformGroup;\n\n\n//# sourceMappingURL=UniformGroup.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUzNy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLElBQUk7O0FBRThDO0FBQ25EOzs7QUN2QmE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDO0FBQ2xDOzs7QUN0RHFEO0FBQ2dCO0FBQ0M7QUFDTTs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQUc7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtCQUFHO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLHdDQUF3QyxrQkFBa0IsaURBQWlELG9CQUFvQixZQUFZO0FBQzNJO0FBQ0EsZ0RBQWdELHNCQUFzQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0RBQWtCO0FBQ3hDLGdCQUFnQixFQUFFLEdBQUcsMEJBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci90eXBlcy5tanM/MjBjOCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3NoYWRlci91dGlscy9nZXREZWZhdWx0VW5pZm9ybVZhbHVlLm1qcz9jZmU2Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1iaWxsYm9hcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanM/OGQ0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFVOSUZPUk1fVFlQRVNfVkFMVUVTID0gW1xuICBcImYzMlwiLFxuICBcImkzMlwiLFxuICBcInZlYzI8ZjMyPlwiLFxuICBcInZlYzM8ZjMyPlwiLFxuICBcInZlYzQ8ZjMyPlwiLFxuICBcIm1hdDJ4MjxmMzI+XCIsXG4gIFwibWF0M3gzPGYzMj5cIixcbiAgXCJtYXQ0eDQ8ZjMyPlwiLFxuICBcIm1hdDN4MjxmMzI+XCIsXG4gIFwibWF0NHgyPGYzMj5cIixcbiAgXCJtYXQyeDM8ZjMyPlwiLFxuICBcIm1hdDR4MzxmMzI+XCIsXG4gIFwibWF0Mng0PGYzMj5cIixcbiAgXCJtYXQzeDQ8ZjMyPlwiXG5dO1xuY29uc3QgVU5JRk9STV9UWVBFU19NQVAgPSBVTklGT1JNX1RZUEVTX1ZBTFVFUy5yZWR1Y2UoKGFjYywgdHlwZSkgPT4ge1xuICBhY2NbdHlwZV0gPSB0cnVlO1xuICByZXR1cm4gYWNjO1xufSwge30pO1xuXG5leHBvcnQgeyBVTklGT1JNX1RZUEVTX01BUCwgVU5JRk9STV9UWVBFU19WQUxVRVMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2V0RGVmYXVsdFVuaWZvcm1WYWx1ZSh0eXBlLCBzaXplKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJmMzJcIjpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgXCJ2ZWMyPGYzMj5cIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDIgKiBzaXplKTtcbiAgICBjYXNlIFwidmVjMzxmMzI+XCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgzICogc2l6ZSk7XG4gICAgY2FzZSBcInZlYzQ8ZjMyPlwiOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCAqIHNpemUpO1xuICAgIGNhc2UgXCJtYXQyeDI8ZjMyPlwiOlxuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAxXG4gICAgICBdKTtcbiAgICBjYXNlIFwibWF0M3gzPGYzMj5cIjpcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMVxuICAgICAgXSk7XG4gICAgY2FzZSBcIm1hdDR4NDxmMzI+XCI6XG4gICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDFcbiAgICAgIF0pO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBnZXREZWZhdWx0VW5pZm9ybVZhbHVlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXREZWZhdWx0VW5pZm9ybVZhbHVlLm1qcy5tYXBcbiIsImltcG9ydCB7IHVpZCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2RhdGEvdWlkLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVJZEZyb21TdHJpbmcgfSBmcm9tICcuLi91dGlscy9jcmVhdGVJZEZyb21TdHJpbmcubWpzJztcbmltcG9ydCB7IFVOSUZPUk1fVFlQRVNfTUFQLCBVTklGT1JNX1RZUEVTX1ZBTFVFUyB9IGZyb20gJy4vdHlwZXMubWpzJztcbmltcG9ydCB7IGdldERlZmF1bHRVbmlmb3JtVmFsdWUgfSBmcm9tICcuL3V0aWxzL2dldERlZmF1bHRVbmlmb3JtVmFsdWUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfVW5pZm9ybUdyb3VwID0gY2xhc3MgX1VuaWZvcm1Hcm91cCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgVW5pZm9ybSBncm91cFxuICAgKiBAcGFyYW0gdW5pZm9ybVN0cnVjdHVyZXMgLSBUaGUgc3RydWN0dXJlcyBvZiB0aGUgdW5pZm9ybSBncm91cFxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25hbCBwYXJhbWV0ZXJzIG9mIHRoaXMgdW5pZm9ybSBncm91cFxuICAgKi9cbiAgY29uc3RydWN0b3IodW5pZm9ybVN0cnVjdHVyZXMsIG9wdGlvbnMpIHtcbiAgICAvKiogdXNlZCBpbnRlcm5hbGx5IHRvIGtub3cgaWYgYSB1bmlmb3JtIGdyb3VwIHdhcyB1c2VkIGluIHRoZSBsYXN0IHJlbmRlciBwYXNzICovXG4gICAgdGhpcy5fdG91Y2hlZCA9IDA7XG4gICAgLyoqIGEgdW5pcXVlIGlkIGZvciB0aGlzIHVuaWZvcm0gZ3JvdXAgdXNlZCB0aHJvdWdoIHRoZSByZW5kZXJlciAqL1xuICAgIHRoaXMudWlkID0gdWlkKFwidW5pZm9ybVwiKTtcbiAgICAvKiogYSByZXNvdXJjZSB0eXBlLCB1c2VkIHRvIGlkZW50aWZ5IGhvdyB0byBoYW5kbGUgaXQgd2hlbiBpdHMgaW4gYSBiaW5kIGdyb3VwIC8gc2hhZGVyIHJlc291cmNlICovXG4gICAgdGhpcy5fcmVzb3VyY2VUeXBlID0gXCJ1bmlmb3JtR3JvdXBcIjtcbiAgICAvKiogdGhlIHJlc291cmNlIGlkIHVzZWQgaW50ZXJuYWxseSBieSB0aGUgcmVuZGVyZXIgdG8gYnVpbGQgYmluZCBncm91cCBrZXlzICovXG4gICAgdGhpcy5fcmVzb3VyY2VJZCA9IHVpZChcInJlc291cmNlXCIpO1xuICAgIC8qKiB1c2VkIGl0byBpZGVudGlmeSBpZiB0aGlzIGlzIGEgdW5pZm9ybSBncm91cCAqL1xuICAgIHRoaXMuaXNVbmlmb3JtR3JvdXAgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gZmxhZyBpZiB0aGlzIFVuaWZvcm0gZ3JvdXBzIGRhdGEgaXMgZGlmZmVyZW50IGZyb20gd2hhdCBpdCBoYXMgc3RvcmVkIGluIGl0cyBidWZmZXIgLyBvbiB0aGUgR1BVXG4gICAgICogQGludGVybmFsXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHRoaXMuX2RpcnR5SWQgPSAwO1xuICAgIC8vIGltcGxlbWVudGluZyB0aGUgaW50ZXJmYWNlIC0gVW5pZm9ybUdyb3VwIGFyZSBub3QgZGVzdHJveWVkXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICBvcHRpb25zID0geyAuLi5fVW5pZm9ybUdyb3VwLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH07XG4gICAgdGhpcy51bmlmb3JtU3RydWN0dXJlcyA9IHVuaWZvcm1TdHJ1Y3R1cmVzO1xuICAgIGNvbnN0IHVuaWZvcm1zID0ge307XG4gICAgZm9yIChjb25zdCBpIGluIHVuaWZvcm1TdHJ1Y3R1cmVzKSB7XG4gICAgICBjb25zdCB1bmlmb3JtRGF0YSA9IHVuaWZvcm1TdHJ1Y3R1cmVzW2ldO1xuICAgICAgdW5pZm9ybURhdGEubmFtZSA9IGk7XG4gICAgICB1bmlmb3JtRGF0YS5zaXplID0gdW5pZm9ybURhdGEuc2l6ZSA/PyAxO1xuICAgICAgaWYgKCFVTklGT1JNX1RZUEVTX01BUFt1bmlmb3JtRGF0YS50eXBlXSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaWZvcm0gdHlwZSAke3VuaWZvcm1EYXRhLnR5cGV9IGlzIG5vdCBzdXBwb3J0ZWQuIFN1cHBvcnRlZCB1bmlmb3JtIHR5cGVzIGFyZTogJHtVTklGT1JNX1RZUEVTX1ZBTFVFUy5qb2luKFwiLCBcIil9YCk7XG4gICAgICB9XG4gICAgICB1bmlmb3JtRGF0YS52YWx1ZSA/PyAodW5pZm9ybURhdGEudmFsdWUgPSBnZXREZWZhdWx0VW5pZm9ybVZhbHVlKHVuaWZvcm1EYXRhLnR5cGUsIHVuaWZvcm1EYXRhLnNpemUpKTtcbiAgICAgIHVuaWZvcm1zW2ldID0gdW5pZm9ybURhdGEudmFsdWU7XG4gICAgfVxuICAgIHRoaXMudW5pZm9ybXMgPSB1bmlmb3JtcztcbiAgICB0aGlzLl9kaXJ0eUlkID0gMTtcbiAgICB0aGlzLnVibyA9IG9wdGlvbnMudWJvO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBvcHRpb25zLmlzU3RhdGljO1xuICAgIHRoaXMuX3NpZ25hdHVyZSA9IGNyZWF0ZUlkRnJvbVN0cmluZyhPYmplY3Qua2V5cyh1bmlmb3JtcykubWFwKFxuICAgICAgKGkpID0+IGAke2l9LSR7dW5pZm9ybVN0cnVjdHVyZXNbaV0udHlwZX1gXG4gICAgKS5qb2luKFwiLVwiKSwgXCJ1bmlmb3JtLWdyb3VwXCIpO1xuICB9XG4gIC8qKiBDYWxsIHRoaXMgaWYgeW91IHdhbnQgdGhlIHVuaWZvcm0gZ3JvdXBzIGRhdGEgdG8gYmUgdXBsb2FkZWQgdG8gdGhlIEdQVSBvbmx5IHVzZWZ1bCBpZiBgaXNTdGF0aWNgIGlzIHRydWUuICovXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9kaXJ0eUlkKys7XG4gIH1cbn07XG4vKiogVGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSB1bmlmb3JtIGdyb3VwLiAqL1xuX1VuaWZvcm1Hcm91cC5kZWZhdWx0T3B0aW9ucyA9IHtcbiAgLyoqIGlmIHRydWUgdGhlIFVuaWZvcm1Hcm91cCBpcyBoYW5kbGVkIGFzIGFuIFVuaWZvcm0gYnVmZmVyIG9iamVjdC4gKi9cbiAgdWJvOiBmYWxzZSxcbiAgLyoqIGlmIHRydWUsIHRoZW4geW91IGFyZSByZXNwb25zaWJsZSBmb3Igd2hlbiB0aGUgZGF0YSBpcyB1cGxvYWRlZCB0byB0aGUgR1BVIGJ5IGNhbGxpbmcgYHVwZGF0ZSgpYCAqL1xuICBpc1N0YXRpYzogZmFsc2Vcbn07XG5sZXQgVW5pZm9ybUdyb3VwID0gX1VuaWZvcm1Hcm91cDtcblxuZXhwb3J0IHsgVW5pZm9ybUdyb3VwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Vbmlmb3JtR3JvdXAubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4537\n')},6798:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ State)\n/* harmony export */ });\n\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  "normal-npm": 6,\n  "add-npm": 7,\n  "screen-npm": 8\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = "normal";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon\'s fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === "none") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === "front";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return "none";\n    }\n    return this.clockwiseFrontFace ? "front" : "back";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default \'normal\'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== "none";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\n\n//# sourceMappingURL=State.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc5OC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0JBQWdCLHFCQUFxQix5QkFBeUIsVUFBVSxjQUFjLFlBQVksZ0JBQWdCLGdCQUFnQixtQkFBbUI7QUFDak07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL1N0YXRlLm1qcz8xZjc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgYmxlbmRNb2RlSWRzID0ge1xuICBub3JtYWw6IDAsXG4gIGFkZDogMSxcbiAgbXVsdGlwbHk6IDIsXG4gIHNjcmVlbjogMyxcbiAgb3ZlcmxheTogNCxcbiAgZXJhc2U6IDUsXG4gIFwibm9ybWFsLW5wbVwiOiA2LFxuICBcImFkZC1ucG1cIjogNyxcbiAgXCJzY3JlZW4tbnBtXCI6IDhcbn07XG5jb25zdCBCTEVORCA9IDA7XG5jb25zdCBPRkZTRVQgPSAxO1xuY29uc3QgQ1VMTElORyA9IDI7XG5jb25zdCBERVBUSF9URVNUID0gMztcbmNvbnN0IFdJTkRJTkcgPSA0O1xuY29uc3QgREVQVEhfTUFTSyA9IDU7XG5jb25zdCBfU3RhdGUgPSBjbGFzcyBfU3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRhdGEgPSAwO1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJub3JtYWxcIjtcbiAgICB0aGlzLnBvbHlnb25PZmZzZXQgPSAwO1xuICAgIHRoaXMuYmxlbmQgPSB0cnVlO1xuICAgIHRoaXMuZGVwdGhNYXNrID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQWN0aXZhdGVzIGJsZW5kaW5nIG9mIHRoZSBjb21wdXRlZCBmcmFnbWVudCBjb2xvciB2YWx1ZXMuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGdldCBibGVuZCgpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBCTEVORCk7XG4gIH1cbiAgc2V0IGJsZW5kKHZhbHVlKSB7XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmIDEgPDwgQkxFTkQpICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgQkxFTkQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgYWRkaW5nIGFuIG9mZnNldCB0byBkZXB0aCB2YWx1ZXMgb2YgcG9seWdvbidzIGZyYWdtZW50c1xuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0IG9mZnNldHMoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgT0ZGU0VUKTtcbiAgfVxuICBzZXQgb2Zmc2V0cyh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IE9GRlNFVCkgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGEgXj0gMSA8PCBPRkZTRVQ7XG4gICAgfVxuICB9XG4gIC8qKiBUaGUgY3VsbGluZyBzZXR0aW5ncyBmb3IgdGhpcyBzdGF0ZSBub25lIC0gTm8gY3VsbGluZyBiYWNrIC0gQmFjayBmYWNlIGN1bGxpbmcgZnJvbnQgLSBGcm9udCBmYWNlIGN1bGxpbmcgKi9cbiAgc2V0IGN1bGxNb2RlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikge1xuICAgICAgdGhpcy5jdWxsaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY3VsbGluZyA9IHRydWU7XG4gICAgdGhpcy5jbG9ja3dpc2VGcm9udEZhY2UgPSB2YWx1ZSA9PT0gXCJmcm9udFwiO1xuICB9XG4gIGdldCBjdWxsTW9kZSgpIHtcbiAgICBpZiAoIXRoaXMuY3VsbGluZykge1xuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9ja3dpc2VGcm9udEZhY2UgPyBcImZyb250XCIgOiBcImJhY2tcIjtcbiAgfVxuICAvKipcbiAgICogQWN0aXZhdGVzIGN1bGxpbmcgb2YgcG9seWdvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBnZXQgY3VsbGluZygpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBDVUxMSU5HKTtcbiAgfVxuICBzZXQgY3VsbGluZyh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IENVTExJTkcpICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgQ1VMTElORztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyBkZXB0aCBjb21wYXJpc29ucyBhbmQgdXBkYXRlcyB0byB0aGUgZGVwdGggYnVmZmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0IGRlcHRoVGVzdCgpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBERVBUSF9URVNUKTtcbiAgfVxuICBzZXQgZGVwdGhUZXN0KHZhbHVlKSB7XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmIDEgPDwgREVQVEhfVEVTVCkgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGEgXj0gMSA8PCBERVBUSF9URVNUO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB3cml0aW5nIHRvIHRoZSBkZXB0aCBidWZmZXIuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGdldCBkZXB0aE1hc2soKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgREVQVEhfTUFTSyk7XG4gIH1cbiAgc2V0IGRlcHRoTWFzayh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IERFUFRIX01BU0spICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgREVQVEhfTUFTSztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCBmcm9udCBvciBiYWNrLWZhY2luZyBwb2x5Z29ucyBjYW4gYmUgY3VsbGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0IGNsb2Nrd2lzZUZyb250RmFjZSgpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBXSU5ESU5HKTtcbiAgfVxuICBzZXQgY2xvY2t3aXNlRnJvbnRGYWNlKHZhbHVlKSB7XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmIDEgPDwgV0lORElORykgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGEgXj0gMSA8PCBXSU5ESU5HO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhlIGJsZW5kIG1vZGUgdG8gYmUgYXBwbGllZCB3aGVuIHRoaXMgc3RhdGUgaXMgc2V0LiBBcHBseSBhIHZhbHVlIG9mIGBub3JtYWxgIHRvIHJlc2V0IHRoZSBibGVuZCBtb2RlLlxuICAgKiBTZXR0aW5nIHRoaXMgbW9kZSB0byBhbnl0aGluZyBvdGhlciB0aGFuIE5PX0JMRU5EIHdpbGwgYXV0b21hdGljYWxseSBzd2l0Y2ggYmxlbmRpbmcgb24uXG4gICAqIEBkZWZhdWx0ICdub3JtYWwnXG4gICAqL1xuICBnZXQgYmxlbmRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl9ibGVuZE1vZGU7XG4gIH1cbiAgc2V0IGJsZW5kTW9kZSh2YWx1ZSkge1xuICAgIHRoaXMuYmxlbmQgPSB2YWx1ZSAhPT0gXCJub25lXCI7XG4gICAgdGhpcy5fYmxlbmRNb2RlID0gdmFsdWU7XG4gICAgdGhpcy5fYmxlbmRNb2RlSWQgPSBibGVuZE1vZGVJZHNbdmFsdWVdIHx8IDA7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBwb2x5Z29uIG9mZnNldC4gU2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIGFueXRoaW5nIG90aGVyIHRoYW4gMCB3aWxsIGF1dG9tYXRpY2FsbHkgZW5hYmxlIHBvbHlnb24gb2Zmc2V0IGZpbGwuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGdldCBwb2x5Z29uT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9wb2x5Z29uT2Zmc2V0O1xuICB9XG4gIHNldCBwb2x5Z29uT2Zmc2V0KHZhbHVlKSB7XG4gICAgdGhpcy5vZmZzZXRzID0gISF2YWx1ZTtcbiAgICB0aGlzLl9wb2x5Z29uT2Zmc2V0ID0gdmFsdWU7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGBbcGl4aS5qcy9jb3JlOlN0YXRlIGJsZW5kTW9kZT0ke3RoaXMuYmxlbmRNb2RlfSBjbG9ja3dpc2VGcm9udEZhY2U9JHt0aGlzLmNsb2Nrd2lzZUZyb250RmFjZX0gY3VsbGluZz0ke3RoaXMuY3VsbGluZ30gZGVwdGhNYXNrPSR7dGhpcy5kZXB0aE1hc2t9IHBvbHlnb25PZmZzZXQ9JHt0aGlzLnBvbHlnb25PZmZzZXR9XWA7XG4gIH1cbiAgLyoqXG4gICAqIEEgcXVpY2tseSBnZXR0aW5nIGFuIGluc3RhbmNlIG9mIGEgU3RhdGUgdGhhdCBpcyBjb25maWd1cmVkIGZvciAyZCByZW5kZXJpbmcuXG4gICAqIEByZXR1cm5zIGEgbmV3IFN0YXRlIHdpdGggdmFsdWVzIHNldCBmb3IgMmQgcmVuZGVyaW5nXG4gICAqL1xuICBzdGF0aWMgZm9yMmQoKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBuZXcgX1N0YXRlKCk7XG4gICAgc3RhdGUuZGVwdGhUZXN0ID0gZmFsc2U7XG4gICAgc3RhdGUuYmxlbmQgPSB0cnVlO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcbl9TdGF0ZS5kZWZhdWx0MmQgPSBfU3RhdGUuZm9yMmQoKTtcbmxldCBTdGF0ZSA9IF9TdGF0ZTtcblxuZXhwb3J0IHsgU3RhdGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YXRlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6798\n')},6669:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   z: () => (/* binding */ TexturePool)\n/* harmony export */ });\n/* unused harmony export TexturePoolClass */\n/* harmony import */ var _maths_misc_pow2_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4181);\n/* harmony import */ var _sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5206);\n/* harmony import */ var _Texture_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9853);\n\n\n\n\n"use strict";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */ Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new _sources_TextureSource_mjs__WEBPACK_IMPORTED_MODULE_0__/* .TextureSource */ .p({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: true\n    });\n    return new _Texture_mjs__WEBPACK_IMPORTED_MODULE_1__/* .Texture */ .x({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = (0,_maths_misc_pow2_mjs__WEBPACK_IMPORTED_MODULE_2__/* .nextPow2 */ .a9)(po2Width);\n    po2Height = (0,_maths_misc_pow2_mjs__WEBPACK_IMPORTED_MODULE_2__/* .nextPow2 */ .a9)(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\n\n\n//# sourceMappingURL=TexturePool.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY2OS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJEO0FBQ0M7QUFDcEI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFlBQVksa0NBQWtDLGtCQUFrQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDhFQUFhO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxlQUFlLDBEQUFPO0FBQ3RCO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0VBQVE7QUFDdkIsZ0JBQWdCLHdFQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHFCQUFxQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXlDO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWJpbGxib2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmVQb29sLm1qcz9mNDU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5leHRQb3cyIH0gZnJvbSAnLi4vLi4vLi4vLi4vbWF0aHMvbWlzYy9wb3cyLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlU291cmNlIH0gZnJvbSAnLi9zb3VyY2VzL1RleHR1cmVTb3VyY2UubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL1RleHR1cmUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5sZXQgY291bnQgPSAwO1xuY2xhc3MgVGV4dHVyZVBvb2xDbGFzcyB7XG4gIC8qKlxuICAgKiBAcGFyYW0gdGV4dHVyZU9wdGlvbnMgLSBvcHRpb25zIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gQmFzZVJlbmRlclRleHR1cmUgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTQ0FMRV9NT0RFfSBbdGV4dHVyZU9wdGlvbnMuc2NhbGVNb2RlXSAtIFNlZSB7QGxpbmsgU0NBTEVfTU9ERX0gZm9yIHBvc3NpYmxlIHZhbHVlcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRleHR1cmVPcHRpb25zKSB7XG4gICAgdGhpcy5fcG9vbEtleUhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl90ZXh0dXJlUG9vbCA9IHt9O1xuICAgIHRoaXMudGV4dHVyZU9wdGlvbnMgPSB0ZXh0dXJlT3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLmVuYWJsZUZ1bGxTY3JlZW4gPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyB0ZXh0dXJlIHdpdGggcGFyYW1zIHRoYXQgd2VyZSBzcGVjaWZpZWQgaW4gcG9vbCBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIHBpeGVsV2lkdGggLSBXaWR0aCBvZiB0ZXh0dXJlIGluIHBpeGVscy5cbiAgICogQHBhcmFtIHBpeGVsSGVpZ2h0IC0gSGVpZ2h0IG9mIHRleHR1cmUgaW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0gYW50aWFsaWFzXG4gICAqL1xuICBjcmVhdGVUZXh0dXJlKHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0LCBhbnRpYWxpYXMpIHtcbiAgICBjb25zdCB0ZXh0dXJlU291cmNlID0gbmV3IFRleHR1cmVTb3VyY2Uoe1xuICAgICAgLi4udGhpcy50ZXh0dXJlT3B0aW9ucyxcbiAgICAgIHdpZHRoOiBwaXhlbFdpZHRoLFxuICAgICAgaGVpZ2h0OiBwaXhlbEhlaWdodCxcbiAgICAgIHJlc29sdXRpb246IDEsXG4gICAgICBhbnRpYWxpYXMsXG4gICAgICBhdXRvR2FyYmFnZUNvbGxlY3Q6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFRleHR1cmUoe1xuICAgICAgc291cmNlOiB0ZXh0dXJlU291cmNlLFxuICAgICAgbGFiZWw6IGB0ZXh0dXJlUG9vbF8ke2NvdW50Kyt9YFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgUG93ZXItb2YtVHdvIHJlbmRlciB0ZXh0dXJlIG9yIGZ1bGxTY3JlZW4gdGV4dHVyZVxuICAgKiBAcGFyYW0gZnJhbWVXaWR0aCAtIFRoZSBtaW5pbXVtIHdpZHRoIG9mIHRoZSByZW5kZXIgdGV4dHVyZS5cbiAgICogQHBhcmFtIGZyYW1lSGVpZ2h0IC0gVGhlIG1pbmltdW0gaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGV4dHVyZS5cbiAgICogQHBhcmFtIHJlc29sdXRpb24gLSBUaGUgcmVzb2x1dGlvbiBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEBwYXJhbSBhbnRpYWxpYXNcbiAgICogQHJldHVybnMgVGhlIG5ldyByZW5kZXIgdGV4dHVyZS5cbiAgICovXG4gIGdldE9wdGltYWxUZXh0dXJlKGZyYW1lV2lkdGgsIGZyYW1lSGVpZ2h0LCByZXNvbHV0aW9uID0gMSwgYW50aWFsaWFzKSB7XG4gICAgbGV0IHBvMldpZHRoID0gTWF0aC5jZWlsKGZyYW1lV2lkdGggKiByZXNvbHV0aW9uIC0gMWUtNik7XG4gICAgbGV0IHBvMkhlaWdodCA9IE1hdGguY2VpbChmcmFtZUhlaWdodCAqIHJlc29sdXRpb24gLSAxZS02KTtcbiAgICBwbzJXaWR0aCA9IG5leHRQb3cyKHBvMldpZHRoKTtcbiAgICBwbzJIZWlnaHQgPSBuZXh0UG93MihwbzJIZWlnaHQpO1xuICAgIGNvbnN0IGtleSA9IChwbzJXaWR0aCA8PCAxNykgKyAocG8ySGVpZ2h0IDw8IDEpICsgKGFudGlhbGlhcyA/IDEgOiAwKTtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmVQb29sW2tleV0pIHtcbiAgICAgIHRoaXMuX3RleHR1cmVQb29sW2tleV0gPSBbXTtcbiAgICB9XG4gICAgbGV0IHRleHR1cmUgPSB0aGlzLl90ZXh0dXJlUG9vbFtrZXldLnBvcCgpO1xuICAgIGlmICghdGV4dHVyZSkge1xuICAgICAgdGV4dHVyZSA9IHRoaXMuY3JlYXRlVGV4dHVyZShwbzJXaWR0aCwgcG8ySGVpZ2h0LCBhbnRpYWxpYXMpO1xuICAgIH1cbiAgICB0ZXh0dXJlLnNvdXJjZS5fcmVzb2x1dGlvbiA9IHJlc29sdXRpb247XG4gICAgdGV4dHVyZS5zb3VyY2Uud2lkdGggPSBwbzJXaWR0aCAvIHJlc29sdXRpb247XG4gICAgdGV4dHVyZS5zb3VyY2UuaGVpZ2h0ID0gcG8ySGVpZ2h0IC8gcmVzb2x1dGlvbjtcbiAgICB0ZXh0dXJlLnNvdXJjZS5waXhlbFdpZHRoID0gcG8yV2lkdGg7XG4gICAgdGV4dHVyZS5zb3VyY2UucGl4ZWxIZWlnaHQgPSBwbzJIZWlnaHQ7XG4gICAgdGV4dHVyZS5mcmFtZS54ID0gMDtcbiAgICB0ZXh0dXJlLmZyYW1lLnkgPSAwO1xuICAgIHRleHR1cmUuZnJhbWUud2lkdGggPSBmcmFtZVdpZHRoO1xuICAgIHRleHR1cmUuZnJhbWUuaGVpZ2h0ID0gZnJhbWVIZWlnaHQ7XG4gICAgdGV4dHVyZS51cGRhdGVVdnMoKTtcbiAgICB0aGlzLl9wb29sS2V5SGFzaFt0ZXh0dXJlLnVpZF0gPSBrZXk7XG4gICAgcmV0dXJuIHRleHR1cmU7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgZXh0cmEgdGV4dHVyZSBvZiB0aGUgc2FtZSBzaXplIGFzIGlucHV0IHJlbmRlclRleHR1cmVcbiAgICogQHBhcmFtIHRleHR1cmUgLSBUaGUgdGV4dHVyZSB0byBjaGVjayB3aGF0IHNpemUgaXQgaXMuXG4gICAqIEBwYXJhbSBhbnRpYWxpYXMgLSBXaGV0aGVyIHRvIHVzZSBhbnRpYWxpYXMuXG4gICAqIEByZXR1cm5zIEEgdGV4dHVyZSB0aGF0IGlzIGEgcG93ZXIgb2YgdHdvXG4gICAqL1xuICBnZXRTYW1lU2l6ZVRleHR1cmUodGV4dHVyZSwgYW50aWFsaWFzID0gZmFsc2UpIHtcbiAgICBjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcbiAgICByZXR1cm4gdGhpcy5nZXRPcHRpbWFsVGV4dHVyZSh0ZXh0dXJlLndpZHRoLCB0ZXh0dXJlLmhlaWdodCwgc291cmNlLl9yZXNvbHV0aW9uLCBhbnRpYWxpYXMpO1xuICB9XG4gIC8qKlxuICAgKiBQbGFjZSBhIHJlbmRlciB0ZXh0dXJlIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICogQHBhcmFtIHJlbmRlclRleHR1cmUgLSBUaGUgcmVuZGVyVGV4dHVyZSB0byBmcmVlXG4gICAqL1xuICByZXR1cm5UZXh0dXJlKHJlbmRlclRleHR1cmUpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLl9wb29sS2V5SGFzaFtyZW5kZXJUZXh0dXJlLnVpZF07XG4gICAgdGhpcy5fdGV4dHVyZVBvb2xba2V5XS5wdXNoKHJlbmRlclRleHR1cmUpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHBvb2wuXG4gICAqIEBwYXJhbSBkZXN0cm95VGV4dHVyZXMgLSBEZXN0cm95IGFsbCBzdG9yZWQgdGV4dHVyZXMuXG4gICAqL1xuICBjbGVhcihkZXN0cm95VGV4dHVyZXMpIHtcbiAgICBkZXN0cm95VGV4dHVyZXMgPSBkZXN0cm95VGV4dHVyZXMgIT09IGZhbHNlO1xuICAgIGlmIChkZXN0cm95VGV4dHVyZXMpIHtcbiAgICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl90ZXh0dXJlUG9vbCkge1xuICAgICAgICBjb25zdCB0ZXh0dXJlcyA9IHRoaXMuX3RleHR1cmVQb29sW2ldO1xuICAgICAgICBpZiAodGV4dHVyZXMpIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRleHR1cmVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB0ZXh0dXJlc1tqXS5kZXN0cm95KHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl90ZXh0dXJlUG9vbCA9IHt9O1xuICB9XG59XG5jb25zdCBUZXh0dXJlUG9vbCA9IG5ldyBUZXh0dXJlUG9vbENsYXNzKCk7XG5cbmV4cG9ydCB7IFRleHR1cmVQb29sLCBUZXh0dXJlUG9vbENsYXNzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UZXh0dXJlUG9vbC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6669\n')},8460:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ createIdFromString)\n/* harmony export */ });\n\nconst idCounts = /* @__PURE__ */ Object.create(null);\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createIdFromString(value, groupId) {\n  let id = idHash[value];\n  if (id === void 0) {\n    if (idCounts[groupId] === void 0) {\n      idCounts[groupId] = 1;\n    }\n    idHash[value] = id = idCounts[groupId]++;\n  }\n  return id;\n}\n\n\n//# sourceMappingURL=createIdFromString.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ2MC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3V0aWxzL2NyZWF0ZUlkRnJvbVN0cmluZy5tanM/MDE2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGlkQ291bnRzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBpZEhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGNyZWF0ZUlkRnJvbVN0cmluZyh2YWx1ZSwgZ3JvdXBJZCkge1xuICBsZXQgaWQgPSBpZEhhc2hbdmFsdWVdO1xuICBpZiAoaWQgPT09IHZvaWQgMCkge1xuICAgIGlmIChpZENvdW50c1tncm91cElkXSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZENvdW50c1tncm91cElkXSA9IDE7XG4gICAgfVxuICAgIGlkSGFzaFt2YWx1ZV0gPSBpZCA9IGlkQ291bnRzW2dyb3VwSWRdKys7XG4gIH1cbiAgcmV0dXJuIGlkO1xufVxuXG5leHBvcnQgeyBjcmVhdGVJZEZyb21TdHJpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUlkRnJvbVN0cmluZy5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8460\n")},9989:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ color32BitToUniform)\n/* harmony export */ });\n/* unused harmony export colorToUniform */\n\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\n\n//# sourceMappingURL=colorToUniform.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTk4OS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0M7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtYmlsbGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2dyYXBoaWNzL2dwdS9jb2xvclRvVW5pZm9ybS5tanM/MmNlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNvbG9yVG9Vbmlmb3JtKHJnYiwgYWxwaGEsIG91dCwgb2Zmc2V0KSB7XG4gIG91dFtvZmZzZXQrK10gPSAocmdiID4+IDE2ICYgMjU1KSAvIDI1NTtcbiAgb3V0W29mZnNldCsrXSA9IChyZ2IgPj4gOCAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSAocmdiICYgMjU1KSAvIDI1NTtcbiAgb3V0W29mZnNldCsrXSA9IGFscGhhO1xufVxuZnVuY3Rpb24gY29sb3IzMkJpdFRvVW5pZm9ybShhYmdyLCBvdXQsIG9mZnNldCkge1xuICBjb25zdCBhbHBoYSA9IChhYmdyID4+IDI0ICYgMjU1KSAvIDI1NTtcbiAgb3V0W29mZnNldCsrXSA9IChhYmdyICYgMjU1KSAvIDI1NSAqIGFscGhhO1xuICBvdXRbb2Zmc2V0KytdID0gKGFiZ3IgPj4gOCAmIDI1NSkgLyAyNTUgKiBhbHBoYTtcbiAgb3V0W29mZnNldCsrXSA9IChhYmdyID4+IDE2ICYgMjU1KSAvIDI1NSAqIGFscGhhO1xuICBvdXRbb2Zmc2V0KytdID0gYWxwaGE7XG59XG5cbmV4cG9ydCB7IGNvbG9yMzJCaXRUb1VuaWZvcm0sIGNvbG9yVG9Vbmlmb3JtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvclRvVW5pZm9ybS5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9989\n")},900:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ BatchableSprite)\n/* harmony export */ });\n\nclass BatchableSprite {\n  constructor() {\n    // batch specific..\n    this.vertexSize = 4;\n    this.indexSize = 6;\n    this.location = 0;\n    // location in the buffer\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const sprite = this.renderable;\n    const texture = this.texture;\n    const wt = sprite.groupTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = this.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = sprite.groupColorAlpha;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    indexBuffer[index] = indicesOffset + 0;\n    indexBuffer[index + 1] = indicesOffset + 1;\n    indexBuffer[index + 2] = indicesOffset + 2;\n    indexBuffer[index + 3] = indicesOffset + 0;\n    indexBuffer[index + 4] = indicesOffset + 2;\n    indexBuffer[index + 5] = indicesOffset + 3;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n    this.bounds = null;\n  }\n}\n\n\n//# sourceMappingURL=BatchableSprite.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAwLmpzIiwibWFwcGluZ3MiOiI7OztBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLWJpbGxib2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUvQmF0Y2hhYmxlU3ByaXRlLm1qcz85YzdkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgQmF0Y2hhYmxlU3ByaXRlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gYmF0Y2ggc3BlY2lmaWMuLlxuICAgIHRoaXMudmVydGV4U2l6ZSA9IDQ7XG4gICAgdGhpcy5pbmRleFNpemUgPSA2O1xuICAgIHRoaXMubG9jYXRpb24gPSAwO1xuICAgIC8vIGxvY2F0aW9uIGluIHRoZSBidWZmZXJcbiAgICB0aGlzLmJhdGNoZXIgPSBudWxsO1xuICAgIHRoaXMuYmF0Y2ggPSBudWxsO1xuICAgIHRoaXMucm91bmRQaXhlbHMgPSAwO1xuICB9XG4gIGdldCBibGVuZE1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyYWJsZS5ncm91cEJsZW5kTW9kZTtcbiAgfVxuICBwYWNrQXR0cmlidXRlcyhmbG9hdDMyVmlldywgdWludDMyVmlldywgaW5kZXgsIHRleHR1cmVJZCkge1xuICAgIGNvbnN0IHNwcml0ZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICBjb25zdCB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlO1xuICAgIGNvbnN0IHd0ID0gc3ByaXRlLmdyb3VwVHJhbnNmb3JtO1xuICAgIGNvbnN0IGEgPSB3dC5hO1xuICAgIGNvbnN0IGIgPSB3dC5iO1xuICAgIGNvbnN0IGMgPSB3dC5jO1xuICAgIGNvbnN0IGQgPSB3dC5kO1xuICAgIGNvbnN0IHR4ID0gd3QudHg7XG4gICAgY29uc3QgdHkgPSB3dC50eTtcbiAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJvdW5kcztcbiAgICBjb25zdCB3MCA9IGJvdW5kcy5tYXhYO1xuICAgIGNvbnN0IHcxID0gYm91bmRzLm1pblg7XG4gICAgY29uc3QgaDAgPSBib3VuZHMubWF4WTtcbiAgICBjb25zdCBoMSA9IGJvdW5kcy5taW5ZO1xuICAgIGNvbnN0IHV2cyA9IHRleHR1cmUudXZzO1xuICAgIGNvbnN0IGFyZ2IgPSBzcHJpdGUuZ3JvdXBDb2xvckFscGhhO1xuICAgIGNvbnN0IHRleHR1cmVJZEFuZFJvdW5kID0gdGV4dHVyZUlkIDw8IDE2IHwgdGhpcy5yb3VuZFBpeGVscyAmIDY1NTM1O1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgMF0gPSBhICogdzEgKyBjICogaDEgKyB0eDtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDFdID0gZCAqIGgxICsgYiAqIHcxICsgdHk7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAyXSA9IHV2cy54MDtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDNdID0gdXZzLnkwO1xuICAgIHVpbnQzMlZpZXdbaW5kZXggKyA0XSA9IGFyZ2I7XG4gICAgdWludDMyVmlld1tpbmRleCArIDVdID0gdGV4dHVyZUlkQW5kUm91bmQ7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyA2XSA9IGEgKiB3MCArIGMgKiBoMSArIHR4O1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgN10gPSBkICogaDEgKyBiICogdzAgKyB0eTtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDhdID0gdXZzLngxO1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgOV0gPSB1dnMueTE7XG4gICAgdWludDMyVmlld1tpbmRleCArIDEwXSA9IGFyZ2I7XG4gICAgdWludDMyVmlld1tpbmRleCArIDExXSA9IHRleHR1cmVJZEFuZFJvdW5kO1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgMTJdID0gYSAqIHcwICsgYyAqIGgwICsgdHg7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAxM10gPSBkICogaDAgKyBiICogdzAgKyB0eTtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDE0XSA9IHV2cy54MjtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDE1XSA9IHV2cy55MjtcbiAgICB1aW50MzJWaWV3W2luZGV4ICsgMTZdID0gYXJnYjtcbiAgICB1aW50MzJWaWV3W2luZGV4ICsgMTddID0gdGV4dHVyZUlkQW5kUm91bmQ7XG4gICAgZmxvYXQzMlZpZXdbaW5kZXggKyAxOF0gPSBhICogdzEgKyBjICogaDAgKyB0eDtcbiAgICBmbG9hdDMyVmlld1tpbmRleCArIDE5XSA9IGQgKiBoMCArIGIgKiB3MSArIHR5O1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgMjBdID0gdXZzLngzO1xuICAgIGZsb2F0MzJWaWV3W2luZGV4ICsgMjFdID0gdXZzLnkzO1xuICAgIHVpbnQzMlZpZXdbaW5kZXggKyAyMl0gPSBhcmdiO1xuICAgIHVpbnQzMlZpZXdbaW5kZXggKyAyM10gPSB0ZXh0dXJlSWRBbmRSb3VuZDtcbiAgfVxuICBwYWNrSW5kZXgoaW5kZXhCdWZmZXIsIGluZGV4LCBpbmRpY2VzT2Zmc2V0KSB7XG4gICAgaW5kZXhCdWZmZXJbaW5kZXhdID0gaW5kaWNlc09mZnNldCArIDA7XG4gICAgaW5kZXhCdWZmZXJbaW5kZXggKyAxXSA9IGluZGljZXNPZmZzZXQgKyAxO1xuICAgIGluZGV4QnVmZmVyW2luZGV4ICsgMl0gPSBpbmRpY2VzT2Zmc2V0ICsgMjtcbiAgICBpbmRleEJ1ZmZlcltpbmRleCArIDNdID0gaW5kaWNlc09mZnNldCArIDA7XG4gICAgaW5kZXhCdWZmZXJbaW5kZXggKyA0XSA9IGluZGljZXNPZmZzZXQgKyAyO1xuICAgIGluZGV4QnVmZmVyW2luZGV4ICsgNV0gPSBpbmRpY2VzT2Zmc2V0ICsgMztcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSBudWxsO1xuICAgIHRoaXMudGV4dHVyZSA9IG51bGw7XG4gICAgdGhpcy5iYXRjaGVyID0gbnVsbDtcbiAgICB0aGlzLmJhdGNoID0gbnVsbDtcbiAgICB0aGlzLmJvdW5kcyA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmF0Y2hhYmxlU3ByaXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXRjaGFibGVTcHJpdGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///900\n")}}]);