(()=>{"use strict";var __webpack_modules__={9990:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6075);\n;// CONCATENATED MODULE: ./esm/BillBoardController.js\n\n/**\n * ビルボード処理に必要な機能を備えたクラス。\n * MeshやSprite内でこのクラスを呼び出すことで、ビルボードとして機能する。\n */\nclass BillBoardController {\n  /**\n   * コンストラクタ\n   * @param target\n   * @param url テクスチャー画像ファイルのURL\n   * @param imageScale\n   * @param option\n   */\n  constructor(target, url, imageScale, option) {\n    this.isInitGeometry = false;\n    /**\n     * テクスチャ画像のアスペクト比を維持したままスケールを調整する。\n     */\n    this.updateScale = () => {\n      const map = this._target.material.map;\n      if (map == null || map.image == null) return;\n      const img = map.image;\n      this.initGeometry(img);\n      const scale = this.calculateScale(img);\n      this._target.scale.set(scale.x, scale.y, 1);\n    };\n    this._target = target;\n    this._imageScale = imageScale;\n    this.initDummyPlane(target);\n    const mat = this.getMaterial(target);\n    mat.visible = false;\n    this._target.material = mat;\n    new three_module/* TextureLoader */.dpR().load(url, texture => {\n      texture.minFilter = option.minFilter;\n      mat.map = texture;\n      mat.needsUpdate = true;\n      mat.visible = true;\n      this.updateScale();\n    });\n  }\n  getMaterial(target) {\n    if (target instanceof three_module/* Mesh */.Kj0) {\n      return new three_module/* MeshBasicMaterial */.vBJ({\n        blending: three_module/* NormalBlending */.bdR,\n        depthTest: true,\n        transparent: true\n      });\n    }\n    if (target instanceof three_module/* Sprite */.jyi) {\n      return new three_module/* SpriteMaterial */.xeV({\n        blending: three_module/* NormalBlending */.bdR,\n        depthTest: true,\n        transparent: true\n      });\n    }\n  }\n  initDummyPlane(target) {\n    if (target instanceof three_module/* Mesh */.Kj0) {\n      const size = 0.0000001;\n      target.geometry = new three_module/* PlaneGeometry */._12(size, size);\n    }\n  }\n  initGeometry(image) {\n    if (!(this._target instanceof three_module/* Mesh */.Kj0)) return;\n    if (this.isInitGeometry) return;\n    this._target.geometry = new three_module/* PlaneGeometry */._12(image.width, image.height);\n    this.isInitGeometry = true;\n  }\n  calculateScale(img) {\n    if (this._target instanceof three_module/* Sprite */.jyi) {\n      return {\n        x: img.width * this._imageScale,\n        y: img.height * this._imageScale\n      };\n    }\n    if (this._target instanceof three_module/* Mesh */.Kj0) {\n      return {\n        x: this._imageScale,\n        y: this._imageScale\n      };\n    }\n  }\n  get imageScale() {\n    return this._imageScale;\n  }\n  /**\n   * 画像のスケールを指定する。\n   *\n   * ScaleCalculator.getDotByDotScale関数で得られた値を設定すると、ビルボードはテクスチャ画像のサイズのまま表示される。\n   *\n   * @param value\n   */\n  set imageScale(value) {\n    this._imageScale = value;\n    this.updateScale();\n  }\n}\n;// CONCATENATED MODULE: ./esm/BillBoard.js\n\n\nclass BillBoard_BillBoardOptionUtil {\n  static init(option) {\n    if (option == null) {\n      option = {};\n    }\n    if (option.minFilter == null) {\n      option.minFilter = three_module/* LinearFilter */.wem;\n    }\n    return option;\n  }\n}\n/**\n * 画像ファイルをテクスチャとするビルボードクラス\n */\nclass BillBoard extends three_module/* Sprite */.jyi {\n  /**\n   * コンストラクタ\n   * @param url テクスチャー画像ファイルのURL\n   * @param imageScale\n   * @param option\n   */\n  constructor(url, imageScale, option) {\n    super();\n    option = BillBoard_BillBoardOptionUtil.init(option);\n    this.obj = new BillBoardController(this, url, imageScale, option);\n  }\n  get imageScale() {\n    return this.obj.imageScale;\n  }\n  /**\n   * 画像のスケールを指定する。\n   * ScaleCalculator.getDotByDotScale関数で得られた値を設定すると、ビルボードはテクスチャ画像のサイズのまま表示される。\n   * @param value\n   */\n  set imageScale(value) {\n    this.obj.imageScale = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ScaleCalculator.js\n\n/**\n * ビルボードのスケール値をカメラとレンダラーから算出するためのクラス。\n */\nclass ScaleCalculator {\n  /**\n   * コンストラクタ\n   * @param camera\n   * @param renderer\n   * @param scene\n   */\n  constructor(camera, renderer, scene) {\n    this.worldDirection = new three_module/* Vector3 */.Pa4();\n    this.worldPosition = new three_module/* Vector3 */.Pa4();\n    this.targetWorldPosition = new three_module/* Vector3 */.Pa4();\n    this._camera = camera;\n    this._renderer = renderer;\n    this.plane = new three_module/* Plane */.JOQ(new three_module/* Vector3 */.Pa4(0, 0, -1));\n    this.initRenderTarget(scene);\n  }\n  /**\n   * 表示されないオブジェクトをシーンに挿入する。\n   * このオブジェクトの描画を監視して、カメラ側のプレーンを更新する。\n   * @param scene\n   */\n  initRenderTarget(scene) {\n    const geo = new three_module/* SphereGeometry */.xo$(1e-4, 3, 2);\n    const mat = new three_module/* MeshBasicMaterial */.vBJ({\n      transparent: true,\n      opacity: 0.0,\n      depthTest: false\n    });\n    const renderTarget = new three_module/* Mesh */.Kj0(geo, mat);\n    renderTarget.renderOrder = Number.MIN_SAFE_INTEGER;\n    scene.add(renderTarget);\n    renderTarget.onBeforeRender = () => {\n      this.updatePlane();\n    };\n  }\n  /**\n   * カメラ側のプレーンの位置を更新する。\n   * このプレーンはカメラの位置と向きに一致する。\n   */\n  updatePlane() {\n    this.plane.setFromNormalAndCoplanarPoint(this._camera.getWorldDirection(this.worldDirection), this._camera.getWorldPosition(this.worldPosition));\n  }\n  /**\n   * targetがドットバイドット表示になるスケール値を算出する。\n   * プレーンから対象オブジェクトまでの距離を利用し、スケール値を逆算する。\n   *\n   * SpriteMaterial.sizeAttenuation = true[Default]\n   * の設定されたオブジェクト用。\n   * https://threejs.org/docs/#api/en/materials/SpriteMaterial.sizeAttenuation\n   *\n   * @param target\n   */\n  getDotByDotScale(target) {\n    const size = this._renderer.getSize(new three_module/* Vector2 */.FM8());\n    const distance = this.plane.distanceToPoint(target.getWorldPosition(this.targetWorldPosition));\n    return this.getFovHeight(distance) / size.height;\n  }\n  /**\n   * SpriteMaterial.sizeAttenuation = false\n   * の設定されたSprite用のスケール値を取得する。\n   */\n  getNonAttenuateScale() {\n    const size = this._renderer.getSize(new three_module/* Vector2 */.FM8());\n    return this.getFovHeight(1.0) / size.height;\n  }\n  getFovHeight(distance) {\n    const halfFov = three_module/* MathUtils.degToRad */.M8C.degToRad(this._camera.fov / 2);\n    const half_fov_height = Math.tan(halfFov) * distance;\n    return half_fov_height * 2;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/pixi.js-legacy/lib/index.mjs + 37 modules\nvar lib = __webpack_require__(2764);\n;// CONCATENATED MODULE: ./esm/StageTexture.js\n\n\nclass StageTexture_StageTexture extends (/* unused pure expression or super */ null && (Texture)) {\n  constructor(width, height) {\n    super();\n    this.onRequestFrame = e => {\n      if (!this._needUpdateCanvas) return;\n      this.update();\n      this._needUpdateCanvas = false;\n    };\n    this.init(width, height);\n  }\n  init(width, height) {\n    this._app = new Application({\n      autoStart: false,\n      backgroundAlpha: 0.0,\n      forceCanvas: true,\n      width: width,\n      height: height\n    });\n    this.image = this._app.view;\n    this.minFilter = LinearFilter;\n    this._stage = this._app.stage;\n    this.isStart = false;\n    this.start();\n  }\n  /**\n   * テクスチャの更新を開始する\n   */\n  start() {\n    if (this.isStart) return;\n    this.isStart = true;\n    Ticker.shared.add(this.onRequestFrame);\n  }\n  /**\n   * テクスチャの更新を停止する\n   */\n  stop() {\n    if (this.isStart) return;\n    this.isStart = false;\n    Ticker.shared.remove(this.onRequestFrame);\n  }\n  update() {\n    this._app.render();\n    this.needsUpdate = true;\n  }\n  setNeedUpdate() {\n    this._needUpdateCanvas = true;\n  }\n  /**\n   * このテクスチャに紐づけられたstageインスタンスを取得する。\n   * カンバスへはstage.canvasでアクセスする。\n   */\n  get stage() {\n    return this._stage;\n  }\n  get domElement() {\n    return this._app.view;\n  }\n}\n;// CONCATENATED MODULE: ./esm/StageBillBoard.js\n\n\n\n\nclass StageBillBoard extends (/* unused pure expression or super */ null && (Sprite)) {\n  constructor(width, height, imageScale = 1, option) {\n    super();\n    this._imageScale = imageScale;\n    option = BillBoardOptionUtil.init(option);\n    this.initTexture(width, height, option);\n  }\n  initTexture(width, height, option) {\n    const texture = new StageTexture(width, height);\n    texture.minFilter = option.minFilter;\n    this.material = new SpriteMaterial({\n      map: texture,\n      blending: NormalBlending,\n      depthTest: false,\n      transparent: true\n    });\n    this.updateScale();\n  }\n  get imageScale() {\n    return this._imageScale;\n  }\n  /**\n   * 画像のスケールを指定する。\n   *\n   * ScaleCalculator.getDotByDotScale関数で得られた値を設定すると、ビルボードはテクスチャ画像のサイズのまま表示される。\n   *\n   * @param value\n   */\n  set imageScale(value) {\n    this._imageScale = value;\n    this.updateScale();\n  }\n  /**\n   * テクスチャ画像のアスペクト比を維持したままスケールを調整する。\n   */\n  updateScale() {\n    const map = this.material.map;\n    const canvas = map.domElement;\n    this.scale.set(canvas.width * this._imageScale, canvas.height * this._imageScale, 1);\n  }\n  /**\n   * オブジェクトの表示/非表示を設定する。\n   * 設定に応じてテクスチャの更新を停止/再開する。\n   * @param visible\n   */\n  setVisible(visible) {\n    StageObject3D.setVisible(this, visible);\n  }\n  getMap() {\n    return this.material.map;\n  }\n  get stage() {\n    return this.getMap().stage;\n  }\n  setNeedUpdate() {\n    this.getMap().setNeedUpdate();\n  }\n}\n;// CONCATENATED MODULE: ./esm/StagePlaneMesh.js\n\n\n\n\n/**\n * Canvasに描画可能な板オブジェクト。\n * ビルボードと異なり、カメラには追従しない。\n *\n * ジオメトリはPlaneBufferGeometryなので、中心点からずらす場合はtranslateを使用する。\n * https://threejs.org/docs/#api/en/core/BufferGeometry.translate\n */\nclass StagePlaneMesh extends (/* unused pure expression or super */ null && (Mesh)) {\n  /**\n   * コンストラクタ\n   * @param width カンバスの幅\n   * @param height カンバスの高さ\n   * @param option テクスチャの初期化オプション\n   */\n  constructor(width, height, option) {\n    super();\n    this.initCanvas(width, height, option);\n    this.geometry = new PlaneGeometry(width, height);\n    this.cameraChaser = new CameraChaser(this);\n  }\n  /**\n   * 描画用カンバスを初期化し、自分自身のマテリアルに格納する。\n   * @param width\n   * @param height\n   * @param option\n   */\n  initCanvas(width, height, option) {\n    const texture = new StageTexture(width, height);\n    this.material = new MeshBasicMaterial({\n      map: texture,\n      blending: NormalBlending,\n      transparent: true,\n      depthTest: true\n    });\n  }\n  /**\n   * オブジェクトの表示/非表示を設定する。\n   * 設定に応じてテクスチャの更新を停止/再開する。\n   * @param visible\n   */\n  setVisible(visible) {\n    StageObject3D.setVisible(this, visible);\n  }\n  getMap() {\n    return this.material.map;\n  }\n  get stage() {\n    return this.getMap().stage;\n  }\n  setNeedUpdate() {\n    this.getMap().setNeedUpdate();\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(8012);\n;// CONCATENATED MODULE: ./demoSrc/common.js\n\n\n\n\nfunction initScene() {\n  const scene = new three_module/* Scene */.xsS();\n  return scene;\n}\nfunction initLight(scene) {\n  const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n  scene.add(ambientLight);\n  return ambientLight;\n}\nfunction initCamera(scene, W, H) {\n  const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, 1, 400);\n  camera.position.set(0, 0, 100);\n  camera.updateMatrixWorld(false);\n  scene.add(camera);\n  return camera;\n}\nfunction initControl(camera, render) {\n  const control = new OrbitControls/* OrbitControls */.z(camera, render.domElement);\n  control.update();\n  return control;\n}\nfunction initRenderer(W, H) {\n  const renderOption = {\n    canvas: document.getElementById("webgl-canvas"),\n    antialias: true\n  };\n  const renderer = new three_module/* WebGLRenderer */.CP7(renderOption);\n  renderer.setClearColor(new three_module/* Color */.Ilk(0x000000));\n  renderer.setSize(W, H);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  return renderer;\n}\nfunction initHelper(scene) {\n  const axesHelper = new three_module/* AxesHelper */.y8_(30);\n  scene.add(axesHelper);\n}\nfunction initSceneSet(W, H) {\n  const scene = initScene();\n  initLight(scene);\n  const camera = initCamera(scene, W, H);\n  const renderer = initRenderer(W, H);\n  const control = initControl(camera, renderer);\n  initHelper(scene);\n  render(control, renderer, scene, camera);\n  return scene;\n}\nfunction render(control, renderer, scene, camera) {\n  const rendering = () => {\n    control.update();\n    renderer.render(scene, camera);\n    requestAnimationFrame(rendering);\n  };\n  rendering();\n}\n;// CONCATENATED MODULE: ./demoSrc/demo_DbD.js\n\n\nconst W = 640;\nconst H = 480;\nlet billboard;\nlet billboard2;\nconst onDomContentsLoaded = () => {\n  const scene = initScene();\n  initLight(scene);\n  const camera = initCamera(scene, W, H);\n  const renderer = initRenderer(W, H);\n  const control = initControl(camera, renderer);\n  initHelper(scene);\n  const calc = initScaleCalc(camera, renderer, scene);\n  initBillBoard(scene, calc);\n  render(control, renderer, scene, camera);\n};\nconst initScaleCalc = (camera, renderer, scene) => {\n  const calc = new ScaleCalculator(camera, renderer, scene);\n  return calc;\n};\nconst initBillBoard = (scene, calc) => {\n  const scale = calc.getNonAttenuateScale();\n  billboard = new BillBoard("./map01.png", scale);\n  billboard.position.set(-40, 0, 0);\n  scene.add(billboard);\n  billboard.material.sizeAttenuation = false;\n  billboard2 = new BillBoard("./map01.png", scale);\n  scene.add(billboard2);\n  billboard2.material.sizeAttenuation = false;\n};\nwindow.onload = onDomContentsLoaded;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9990\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(s=0;s<deferred.length;s++){for(var[U,F,B]=deferred[s],g=!0,e=0;e<U.length;e++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[e])))?U.splice(e--,1):(g=!1,B<I&&(I=B));if(g){deferred.splice(s--,1);var C=F();void 0!==C&&(Q=C)}}return Q}B=B||0;for(var s=deferred.length;s>0&&deferred[s-1][2]>B;s--)deferred[s]=deferred[s-1];deferred[s]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=535,(()=>{var Q={535:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[g,e,C]=F,s=0;if(g.some((U=>0!==Q[U]))){for(B in e)__webpack_require__.o(e,B)&&(__webpack_require__.m[B]=e[B]);if(C)var l=C(__webpack_require__)}for(U&&U(F);s<g.length;s++)I=g[s],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_threejs_billboard=self.webpackChunk_masatomakino_threejs_billboard||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(9990)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();