(()=>{var __webpack_modules__={4654:()=>{},9:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(7429);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6075);\n;// CONCATENATED MODULE: ./esm/BillBoardPlane.js\n\n\n\nclass BillBoardPlane extends (/* unused pure expression or super */ null && (Mesh)) {\n  /**\n   * コンストラクタ\n   * @param url テクスチャー画像ファイルのURL\n   * @param imageScale\n   * @param option\n   */\n  constructor(url, imageScale, option) {\n    super();\n    const initializedOption = BillBoardOptionUtil.init(option);\n    this.obj = new BillBoardController(this, url, imageScale, initializedOption);\n    this.cameraChaser = new CameraChaser(this);\n  }\n  get imageScale() {\n    return this.obj.imageScale;\n  }\n  /**\n   * 画像のスケールを指定する。\n   * ScaleCalculator.getDotByDotScale関数で得られた値を設定すると、ビルボードはテクスチャ画像のサイズのまま表示される。\n   * @param value\n   */\n  set imageScale(value) {\n    this.obj.imageScale = value;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/pixi.js-legacy/lib/index.mjs + 37 modules\nvar lib = __webpack_require__(2764);\n;// CONCATENATED MODULE: ./esm/StageTexture.js\n\n\n/**\n * @deprecated Use SharedStageTexture instead.\n */\nclass StageTexture_StageTexture extends (/* unused pure expression or super */ null && (Texture)) {\n  get isStarted() {\n    return this._isStarted;\n  }\n  constructor(width, height) {\n    super();\n    this._needUpdateCanvas = false;\n    this._isStarted = false;\n    this.onRequestFrame = e => {\n      if (!this._needUpdateCanvas) return;\n      this.update();\n      this._needUpdateCanvas = false;\n    };\n    this._app = new Application({\n      autoStart: false,\n      backgroundAlpha: 0.0,\n      forceCanvas: true,\n      width: width,\n      height: height\n    });\n    this.image = this._app.view;\n    this.minFilter = LinearFilter;\n    this.colorSpace = "srgb";\n    this._stage = this._app.stage;\n    this.start();\n  }\n  /**\n   * テクスチャの更新を開始する\n   */\n  start() {\n    if (this._isStarted) return;\n    this._isStarted = true;\n    Ticker.shared.add(this.onRequestFrame);\n  }\n  /**\n   * テクスチャの更新を停止する\n   */\n  stop() {\n    if (!this._isStarted) return;\n    this._isStarted = false;\n    Ticker.shared.remove(this.onRequestFrame);\n  }\n  update() {\n    this._app.render();\n    this.needsUpdate = true;\n  }\n  setNeedUpdate() {\n    this._needUpdateCanvas = true;\n  }\n  /**\n   * このテクスチャに紐づけられたstageインスタンスを取得する。\n   * カンバスへはstage.canvasでアクセスする。\n   */\n  get stage() {\n    return this._stage;\n  }\n  get domElement() {\n    return this._app.view;\n  }\n}\n;// CONCATENATED MODULE: ./esm/StageBillBoard.js\n\n\n\n\nclass StageBillBoard extends (/* unused pure expression or super */ null && (Sprite)) {\n  constructor(width, height, imageScale = 1, option) {\n    super();\n    this._imageScale = imageScale;\n    const initializedOption = BillBoardOptionUtil.init(option);\n    this.initTexture(width, height, initializedOption);\n  }\n  initTexture(width, height, option) {\n    const texture = new StageTexture(width, height);\n    texture.minFilter = option.minFilter;\n    this.material = new SpriteMaterial({\n      map: texture,\n      blending: NormalBlending,\n      depthTest: false,\n      transparent: true\n    });\n    this.updateScale();\n  }\n  get imageScale() {\n    return this._imageScale;\n  }\n  /**\n   * 画像のスケールを指定する。\n   *\n   * ScaleCalculator.getDotByDotScale関数で得られた値を設定すると、ビルボードはテクスチャ画像のサイズのまま表示される。\n   *\n   * @param value\n   */\n  set imageScale(value) {\n    this._imageScale = value;\n    this.updateScale();\n  }\n  /**\n   * テクスチャ画像のアスペクト比を維持したままスケールを調整する。\n   */\n  updateScale() {\n    const map = this.material.map;\n    const canvas = map.domElement;\n    this.scale.set(canvas.width * this._imageScale, canvas.height * this._imageScale, 1);\n  }\n  /**\n   * オブジェクトの表示/非表示を設定する。\n   * 設定に応じてテクスチャの更新を停止/再開する。\n   * @param visible\n   */\n  setVisible(visible) {\n    StageObject3D.setVisible(this, visible);\n  }\n  getMap() {\n    return this.material.map;\n  }\n  get stage() {\n    return this.getMap().stage;\n  }\n  setNeedUpdate() {\n    this.getMap().setNeedUpdate();\n  }\n}\n;// CONCATENATED MODULE: ./esm/StagePlaneMesh.js\n\n\n\n\n/**\n * Canvasに描画可能な板オブジェクト。\n * ビルボードと異なり、カメラには追従しない。\n *\n * ジオメトリはPlaneBufferGeometryなので、中心点からずらす場合はtranslateを使用する。\n * https://threejs.org/docs/#api/en/core/BufferGeometry.translate\n *\n * @deprecated use SharedStagePlaneMesh\n */\nclass StagePlaneMesh extends (/* unused pure expression or super */ null && (Mesh)) {\n  /**\n   * コンストラクタ\n   * @param width カンバスの幅\n   * @param height カンバスの高さ\n   * @param option テクスチャの初期化オプション\n   */\n  constructor(width, height, option) {\n    super();\n    this.initCanvas(width, height, option);\n    this.geometry = new PlaneGeometry(width, height);\n    this.cameraChaser = new CameraChaser(this);\n  }\n  /**\n   * 描画用カンバスを初期化し、自分自身のマテリアルに格納する。\n   * @param width\n   * @param height\n   * @param option\n   */\n  initCanvas(width, height, option) {\n    const texture = new StageTexture(width, height);\n    this.material = new MeshBasicMaterial({\n      map: texture,\n      blending: NormalBlending,\n      transparent: true,\n      depthTest: true\n    });\n  }\n  /**\n   * オブジェクトの表示/非表示を設定する。\n   * 設定に応じてテクスチャの更新を停止/再開する。\n   * @param visible\n   */\n  setVisible(visible) {\n    StageObject3D.setVisible(this, visible);\n  }\n  getMap() {\n    return this.material.map;\n  }\n  get stage() {\n    return this.getMap().stage;\n  }\n  setNeedUpdate() {\n    this.getMap().setNeedUpdate();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/pixi.js/lib/index.mjs + 119 modules\nvar pixi_js_lib = __webpack_require__(8066);\n;// CONCATENATED MODULE: ./esm/SharedStageTexture.js\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === "m") throw new TypeError("Private method is not writable");\n  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\n  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\n  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\n  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\n  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SharedStageTexture__app;\n\n\n/**\n * Billboard用の共有テクスチャ\n * 各Billboardはこのテクスチャを参照し、UV座標を調整して画像を表示する。\n *\n * デフォルトでは、テクスチャは自動更新されない。\n * テクスチャを共有するBillboardが責任を持って、setNeedUpdate関数を呼び出してテクスチャの更新を宣言する必要がある。\n */\nclass SharedStageTexture extends three_module/* Texture */.xEZ {\n  /**\n   * 共有テクスチャを生成する\n   *\n   * @param width テクスチャの幅 単位ビクセル pow2であることを推奨\n   * @param height テクスチャの高さ 単位ビクセル pow2であることを推奨\n   */\n  constructor(width, height) {\n    super();\n    _SharedStageTexture__app.set(this, void 0);\n    this.onRequestFrame = () => {\n      __classPrivateFieldGet(this, _SharedStageTexture__app, "f").render();\n      this.needsUpdate = true;\n    };\n    __classPrivateFieldSet(this, _SharedStageTexture__app, new pixi_js_lib/* Application */.MxU({\n      autoStart: false,\n      backgroundAlpha: 0.0,\n      width,\n      height\n    }), "f");\n    this.image = __classPrivateFieldGet(this, _SharedStageTexture__app, "f").view;\n    this.colorSpace = "srgb";\n    pixi_js_lib/* Ticker */.vB5.shared.addOnce(this.onRequestFrame);\n  }\n  get stage() {\n    return __classPrivateFieldGet(this, _SharedStageTexture__app, "f").stage;\n  }\n  get width() {\n    return __classPrivateFieldGet(this, _SharedStageTexture__app, "f").renderer.width;\n  }\n  get height() {\n    return __classPrivateFieldGet(this, _SharedStageTexture__app, "f").renderer.height;\n  }\n  /**\n   * テクスチャの更新を宣言する\n   *\n   * この関数が呼び出されると、次のフレームのレンダリング時にテクスチャが更新される。\n   */\n  setNeedUpdate() {\n    pixi_js_lib/* Ticker */.vB5.shared.addOnce(this.onRequestFrame);\n  }\n  calcurateUV(rect) {\n    return {\n      x1: rect.x / this.width,\n      y1: (this.height - rect.y - rect.height) / this.height,\n      x2: (rect.x + rect.width) / this.width,\n      y2: (this.height - rect.y) / this.height\n    };\n  }\n}\n_SharedStageTexture__app = new WeakMap();\nconst SharedStageTexture_isSharedStageMaterial = material => {\n  return "map" in material && material.map instanceof SharedStageTexture;\n};\n/**\n * ジオメトリにUV座標を設定する。\n */\nconst SharedStageTexture_updateUVAttribute = (geometry, material, textureArea) => {\n  if (!SharedStageTexture_isSharedStageMaterial(material)) {\n    throw new Error("sharedMaterial.map must be SharedStageTexture");\n  }\n  const area = material.map.calcurateUV(textureArea);\n  const uv = geometry.getAttribute("uv");\n  uv.setXY(0, area.x1, area.y2);\n  uv.setXY(1, area.x2, area.y2);\n  uv.setXY(2, area.x1, area.y1);\n  uv.setXY(3, area.x2, area.y1);\n  uv.needsUpdate = true;\n};\n;// CONCATENATED MODULE: ./esm/SharedStageBillboard.js\n\n\nclass SharedStageBillboard extends (/* unused pure expression or super */ null && (Sprite)) {\n  get imageScale() {\n    return this._imageScale;\n  }\n  set imageScale(value) {\n    this._imageScale = value;\n    this.updateScale();\n  }\n  /**\n   * 現在の表示領域を取得する。\n   *\n   * @returns テクスチャの表示領域 単位ビクセル\n   */\n  cloneTextureArea() {\n    return Object.assign({}, this._textureArea);\n  }\n  /**\n   * 共有テクスチャからビルボードに表示する領域を更新する。\n   *\n   * @param value テクスチャの表示領域 単位ビクセル\n   */\n  updateTextureAreaAndUV(value) {\n    this._textureArea = Object.assign({}, value);\n    this.updateScale();\n    this.updateUVAttribute();\n  }\n  constructor(sharedMaterial, _textureArea, _imageScale = 1) {\n    super();\n    this.sharedMaterial = sharedMaterial;\n    this._textureArea = _textureArea;\n    this._imageScale = _imageScale;\n    if (!isSharedStageMaterial(sharedMaterial)) {\n      throw new Error("sharedMaterial.map must be SharedStageTexture");\n    }\n    /**\n     * SharedStageBillboardでは、Sprite間でジオメトリを共有しない。\n     * 個別にUV座標を持つため。\n     * また、PlaneとpositionおよびUVを共通化するためPlaneGeometryを使用する。\n     */\n    this.geometry = new PlaneGeometry();\n    this.material = sharedMaterial;\n    this.updateScale();\n    this.updateUVAttribute();\n  }\n  /**\n   * テクスチャ画像のアスペクト比を維持したままスケールを調整する。\n   */\n  updateScale() {\n    this.scale.set(this._textureArea.width * this._imageScale, this._textureArea.height * this._imageScale, 1);\n  }\n  /**\n   * ジオメトリにUV座標を設定する。\n   */\n  updateUVAttribute() {\n    updateUVAttribute(this.geometry, this.sharedMaterial, this._textureArea);\n  }\n}\n;// CONCATENATED MODULE: ./esm/CameraChaser.js\n\nclass CameraChaser_CameraChaser {\n  constructor(target) {\n    /**\n     * 水平方向に回転し、カメラに追従するか否か。\n     */\n    this.isLookingCameraHorizontal = false;\n    this.cameraPos = new three_module/* Vector3 */.Pa4();\n    this.worldPos = new three_module/* Vector3 */.Pa4();\n    this.needUpdateWorldPosition = false;\n    /**\n     * Planeをカメラに向ける。lookCameraHorizontal = trueの時だけ稼働する。\n     * 回転方向はY軸を中心とした左右方向のみ。\n     * (X軸方向には回転しない。X軸方向に回転させたい場合はBillBoardクラスを利用する。)\n     *\n     * カメラ位置がPlaneの北極、南極をまたぐと急激に回転するので注意。\n     * 利用する場合はカメラの高さ方向に制限をかけた方が良い。\n     *\n     * @param render\n     * @param scene\n     * @param camera\n     * @param geometry\n     * @param material\n     * @param group\n     */\n    this.lookCamera = (render, scene, camera, geometry, material, group) => {\n      if (!this.isLookingCameraHorizontal) return;\n      if (this.needUpdateWorldPosition) {\n        this.target.getWorldPosition(this.worldPos);\n        this.needUpdateWorldPosition = false;\n      }\n      this.cameraPos.set(camera.position.x, this.worldPos.y, camera.position.z);\n      this.target.lookAt(this.cameraPos);\n    };\n    this.target = target;\n    this.target.getWorldPosition(this.worldPos);\n    this.target.onBeforeRender = this.lookCamera;\n  }\n}\n;// CONCATENATED MODULE: ./esm/SharedStagePlaneMesh.js\n\n\n\n/**\n * Canvasに描画可能な板オブジェクト。\n * ビルボードと異なり、カメラには追従しない。\n *\n * ジオメトリはPlaneGeometryなので、中心点からずらす場合はtranslateを使用する。\n * https://threejs.org/docs/#api/en/core/BufferGeometry.translate\n *\n * 各頂点にはUV座標が設定される。\n * 4頂点2ポリゴンであることを前提としているため、それ以外のジオメトリを渡した場合は正常に動作しない。\n */\nclass SharedStagePlaneMesh extends three_module/* Mesh */.Kj0 {\n  /**\n   * 現在の表示領域を取得する。\n   *\n   * @returns テクスチャの表示領域 単位ビクセル\n   */\n  cloneTextureArea() {\n    return Object.assign({}, this._textureArea);\n  }\n  /**\n   * 共有テクスチャからビルボードに表示する領域を更新する。\n   *\n   * @param value テクスチャの表示領域 単位ビクセル\n   */\n  updateTextureAreaAndUV(value) {\n    const prevTextureArea = Object.assign({}, this._textureArea);\n    this._textureArea = Object.assign({}, value);\n    if (prevTextureArea.width !== value.width || prevTextureArea.height !== value.height) {\n      this.geometry = new three_module/* PlaneGeometry */._12(value.width, value.height);\n    }\n    this.updateUVAttribute();\n  }\n  constructor(sharedMaterial, _textureArea) {\n    super();\n    this.sharedMaterial = sharedMaterial;\n    this._textureArea = _textureArea;\n    this.cameraChaser = new CameraChaser_CameraChaser(this);\n    if (!SharedStageTexture_isSharedStageMaterial(sharedMaterial)) {\n      throw new Error("sharedMaterial.map must be SharedStageTexture");\n    }\n    this.geometry = new three_module/* PlaneGeometry */._12(_textureArea.width, _textureArea.height);\n    this.material = sharedMaterial;\n    this.updateUVAttribute();\n  }\n  /**\n   * ジオメトリにUV座標を設定する。\n   */\n  updateUVAttribute() {\n    SharedStageTexture_updateUVAttribute(this.geometry, this.sharedMaterial, this._textureArea);\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(8012);\n;// CONCATENATED MODULE: ./demoSrc/common.js\n\n\n\n\n\n\nfunction initScene() {\n  const scene = new three_module/* Scene */.xsS();\n  return scene;\n}\nfunction initLight(scene) {\n  const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n  scene.add(ambientLight);\n  return ambientLight;\n}\nfunction initCamera(scene, W, H) {\n  const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, 1, 400);\n  camera.position.set(0, 0, 100);\n  camera.updateMatrixWorld(false);\n  scene.add(camera);\n  return camera;\n}\nfunction initControl(camera, render) {\n  const control = new OrbitControls/* OrbitControls */.z(camera, render.domElement);\n  control.update();\n  return control;\n}\nfunction initRenderer(W, H) {\n  const renderOption = {\n    canvas: document.getElementById("webgl-canvas"),\n    antialias: true\n  };\n  const renderer = new three_module/* WebGLRenderer */.CP7(renderOption);\n  renderer.setClearColor(new three_module/* Color */.Ilk(0x000000));\n  renderer.setSize(W, H);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  return renderer;\n}\nfunction initHelper(scene) {\n  const axesHelper = new three_module/* AxesHelper */.y8_(30);\n  scene.add(axesHelper);\n}\nfunction initSceneSet(W, H) {\n  const scene = initScene();\n  initLight(scene);\n  const camera = initCamera(scene, W, H);\n  const renderer = initRenderer(W, H);\n  const control = initControl(camera, renderer);\n  initHelper(scene);\n  render(control, renderer, scene, camera);\n  return scene;\n}\nfunction render(control, renderer, scene, camera) {\n  const rendering = () => {\n    control.update();\n    renderer.render(scene, camera);\n    requestAnimationFrame(rendering);\n  };\n  rendering();\n}\nconst initSharedStageTextureGUI = (gui, object3D, name) => {\n  const target = object3D.cloneTextureArea();\n  const onUpdate = () => {\n    object3D.updateTextureAreaAndUV(target);\n  };\n  const folder = gui.addFolder(name);\n  folder.add(target, "x", 0, 1024, 1).onChange(onUpdate);\n  folder.add(target, "y", 0, 1024, 1).onChange(onUpdate);\n  folder.add(target, "width", 0, 1024, 1).onChange(onUpdate);\n  folder.add(target, "height", 0, 1024, 1).onChange(onUpdate);\n};\nconst initSharedTexture = () => {\n  const texture = new SharedStageTexture(1024, 1024);\n  const sprite = pixi_js_lib/* Sprite */.jyi.from("./uv_grid_opengl.jpg");\n  texture.stage.addChild(sprite);\n  const onload = () => {\n    texture.setNeedUpdate();\n  };\n  sprite.texture.baseTexture.once("loaded", onload);\n  if (sprite.texture.baseTexture.hasLoaded) {\n    onload();\n  }\n  const text = new pixi_js_lib/* Text */.xvT("Hello World", {\n    fontSize: 48,\n    fontFamily: "Arial",\n    fill: "#ff7700"\n  });\n  texture.stage.addChild(text);\n  text.x = 256;\n  text.y = 256 + 60;\n  texture.setNeedUpdate();\n  return texture;\n};\n;// CONCATENATED MODULE: ./demoSrc/demo_SharedStagePlaneMesh.js\n\n\n\n\nconst W = 640;\nconst H = 480;\nconst onDomContentsLoaded = () => {\n  const scene = initSceneSet(W, H);\n  initBillBoards(scene);\n};\nconst initBillBoards = scene => {\n  const texture = initSharedTexture();\n  const material = new three_module/* MeshBasicMaterial */.vBJ({\n    map: texture,\n    transparent: true\n  });\n  const canvasBoard = initPlane(scene, 30, material);\n  const canvasBoard2 = initPlane(scene, -30, material);\n  const gui = new lil_gui_esm/* default */.ZP();\n  initSharedStageTextureGUI(gui, canvasBoard, "board 01");\n  initSharedStageTextureGUI(gui, canvasBoard2, "board 02");\n};\nconst initPlane = (scene, positionX, material) => {\n  const canvasBoard = new SharedStagePlaneMesh(material, {\n    x: 256,\n    y: 256,\n    width: 256,\n    height: 256\n  });\n  canvasBoard.position.set(positionX, 0, 0);\n  canvasBoard.scale.set(0.1, 0.1, 0.1);\n  canvasBoard.cameraChaser.isLookingCameraHorizontal = true;\n  scene.add(canvasBoard);\n  return canvasBoard;\n};\nwindow.onload = onDomContentsLoaded;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={id:Q,loaded:!1,exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var g=1/0;for(l=0;l<deferred.length;l++){for(var[U,F,B]=deferred[l],e=!0,s=0;s<U.length;s++)(!1&B||g>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[s])))?U.splice(s--,1):(e=!1,B<g&&(g=B));if(e){deferred.splice(l--,1);var I=F();void 0!==I&&(Q=I)}}return Q}B=B||0;for(var l=deferred.length;l>0&&deferred[l-1][2]>B;l--)deferred[l]=deferred[l-1];deferred[l]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__.nmd=Q=>(Q.paths=[],Q.children||(Q.children=[]),Q),__webpack_require__.j=442,(()=>{var Q={442:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,g,[e,s,I]=F,l=0;if(e.some((U=>0!==Q[U]))){for(B in s)__webpack_require__.o(s,B)&&(__webpack_require__.m[B]=s[B]);if(I)var C=I(__webpack_require__)}for(U&&U(F);l<e.length;l++)g=e[l],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(C)},F=self.webpackChunk_masatomakino_threejs_billboard=self.webpackChunk_masatomakino_threejs_billboard||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(9)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();